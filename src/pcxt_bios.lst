     1                                          CPU 8086
     2                                          BITS 16
     3                                  
     4                                  ;Available Memory
     5                                  ; Dram memory
     6                                  ; 00000h-----+--------RAM 1MBytes
     7                                  ; F7FFFh-----|
     8                                  ; Eeprom memory
     9                                  ; F8000h-----+--------ROM 32KBytes
    10                                  ; F9000h-----|
    11                                  ; FA000h-----|
    12                                  ; FB000h-----|
    13                                  ; FC000h-----|
    14                                  ; FD000h-----|
    15                                  ; FE000h-----|
    16                                  ; FF000H-----|
    17                                  ; FFFFFh-----|
    18                                  
    19                                  
    20                                  %imacro setloc  1.nolist
    21                                  %assign pad_bytes (%1-($-$$)-START)
    22                                  %if pad_bytes < 0
    23                                  %assign over_bytes -pad_bytes
    24                                  %error Preceding code extends beyond setloc location by over_bytes bytes
    25                                  %endif
    26                                  %if pad_bytes > 0
    27                                  %warning Inserting pad_bytes bytes
    28                                   times  pad_bytes db 0FFh
    29                                  %endif
    30                                  %endm
    31                                  ;History
    32                                  ; 2444 - Version 10.0.01 implemented print2
    33                                  ; 2444 - Version 10.0.01 fixed erro in UART_TX, no push de BX
    34                                  ; 2444 - Version 10.0.02 implemented prompt
    35                                  ; 2445 - Version 10.0.03 now run in a 32k bytes of eeprom.
    36                                  ;                        START = 0x8000
    37                                  ;                        init2 = 0xE000
    38                                  ;                        reset = 0xFFF0
    39                                  ; 0C000h
    40                                  
    41                                  %define	START		08000h		; BIOS starts at offset 08000h
    42                                  %define DATE		'22/10/24'
    43                                  %define MODEL_BYTE	0FEh		; IBM PC/XT
    44                                  %define VERSION		'1.0.02'	; BIOS version
    45                                  
    46                                  %define context_off  0x0
    47                                  %define context_seg  0x2
    48                                  %define context_len  0x4
    49                                  %define context_val  0x6000
    50                                  
    51                                  bioscseg	equ	0F000h
    52                                  dramcseg        equ     06000h
    53                                  biosdseg	equ	0040h
    54                                  
    55                                  post_reg	equ	80h
    56                                  serial_timeout	equ	7Ch	; byte[4] - serial port timeout values
    57                                  equip_serial	equ	00h	; word[4] - addresses of serial ports
    58                                  unused_reg	equ	0C0h	; used for hardware detection and I/O delays
    59                                  equipment_list	equ	10h	; word - equpment list
    60                                  
    61                                  reg_addr_dump   equ     0x0000
    62                                  reg_buff_read   equ     0x0002  ; buffer 255 bytes
    63                                  reg_counter     equ     0x0100  ; char counter in the buffer
    64                                  reg_next_dumm   equ     0x0101  ; next variable
    65                                  
    66                                          org	START
    67                                  
    68 00000000 E99060                             jmp     init
    69                                             ;12345678901234567890
    70 00000003 38303838202D204350-     msg0    db "8088 - CPU TXM/8 III",0
    70 0000000C 552054584D2F382049-
    70 00000015 494900             
    71 00000018 5061756C6F2053696C-     msg1    db "Paulo Silva  (c)2024",0
    71 00000021 766120202863293230-
    71 0000002A 323400             
    72 0000002D 4D6F6E383620562031-     msg2    db "Mon86 V 1.0.00 2443A",0
    72 00000036 2E302E303020323434-
    72 0000003F 334100             
    73 00000042 314D42206472616D20-     msg3    db "1MB dram rom at28c64",0
    73 0000004B 726F6D206174323863-
    73 00000054 363400             
    74 00000057 0028145450              row:    db 0, 40, 20, 84, 80
    75                                  
    76 0000005C FF<rep 5FA4h>                   setloc	0E000h
    76          ******************       warning: Inserting 24484 bytes [-w+user]
    77                                  
    78 00006000 585420383038382042-     welcome		db	"XT 8088 BIOS, Version "
    78 00006009 494F532C2056657273-
    78 00006012 696F6E20           
    79 00006016 312E302E3032            		db	VERSION
    80 0000601C 2E200D                  		db	". ", 0Dh
    81 0000601F 5061756C6F2053696C-     		db	"Paulo Silva(pgordao) - Copyright (C) 2024", 0Dh
    81 00006028 76612870676F726461-
    81 00006031 6F29202D20436F7079-
    81 0000603A 726967687420284329-
    81 00006043 20323032340D       
    82 00006049 43505520383038382D-     		db	"CPU 8088-2   board TXM/8 III  ", 0Dh
    82 00006052 32202020626F617264-
    82 0000605B 2054584D2F38204949-
    82 00006064 4920200D           
    83 00006068 4D6F6E383620562031-     		db	"Mon86 V ",VERSION ," 2443A 1MB Dram Rom at28c64", 0Dh, 0
    83 00006071 2E302E303220323434-
    83 0000607A 334120314D42204472-
    83 00006083 616D20526F6D206174-
    83 0000608C 32386336340D00     
    84                                          
    85                                  init:
    86 00006093 FA                              cli				; disable interrupts
    87 00006094 FC                              cld				; clear direction flag
    88 00006095 B80060                          mov ax, 0x6000
    89 00006098 8EC0                            mov es, ax
    90 0000609A B80070                          mov ax, 0x7000                  ; Segmento Stack
    91 0000609D 8ED0                            mov ss, ax
    92 0000609F B800F0                          mov ax, 0xF000
    93 000060A2 8ED8                            mov ds, ax
    94 000060A4 31E4                            xor sp, sp
    95                                  
    96                                  ;	MOV AX, 0XF000		;SETS STACK SEGMENT TO 0xF000
    97                                  ;	MOV SS, AX		;
    98                                  ;	MOV SP, 0X7FE0		;0xF000:0X7FE0 = 0XF7FE0
    99                                  
   100                                          ;PPI 99 PortA = input PortB = output PortC = input
   101 000060A6 B099                            mov AL, 0x99
   102 000060A8 E663                            out 0x63, AL
   103                                  
   104 000060AA E88700                  	CALL LOAD_INT_VECTOR_TABLE	;COPIES INTERRUPT VECTOR TABLE TO ADDRESS 0X0000:0X0000
   105 000060AD E89A00                  	CALL LOAD_BIOS_DATA_AREA	;COPIES BIOS DATA TO ADDRESS 0X0000:0X0400
   106 000060B0 E8AD00                  	CALL INITIALIZE_8259		;INTERRUPT CONTROLLER
   107 000060B3 E8BD00                  	CALL INITIALIZE_8253		;TIMER
   108                                  
   109                                  	;THIS IS NOT PART OF THE V40 BUT IS BUILT INTO THE MAIN BOARD
   110 000060B6 B000                    	MOV  AL, 0X00 	;DISABLE SPK AND CHANEL CHECK
   111 000060B8 E661                    	OUT  0X61, AL	;PORT 0X61 CONTROL PORT		
   112                                  
   113                                  ;	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   114                                  ;	MOV AL, 'I'		;SET AL TO CHAR	
   115                                  ;	INT 0X10		;CALL INTERRUPT 0X10
   116                                  ;	MOV AL, '1'		;SET AL TO CHAR	
   117                                  ;	INT 0X10		;CALL INTERRUPT 0X10
   118                                  ;	MOV AL, 'D'		;SET AL TO CHAR
   119                                  ;	INT 0X10		;CALL INTERRUPT 0X10
   120                                  
   121 000060BA E8D001                          call configure_uart
   122                                  
   123 000060BD E8AD02                          call scr_clear
   124 000060C0 BB[0060]                        mov  bx, welcome
   125 000060C3 E87702                          call print2
   126                                  
   127 000060C6 B800E0                          mov  AX, 0xE000
   128 000060C9 E80500                          call writeRegAddrDump
   129 000060CC E8D200                          call dump
   130                                  
   131                                          ;;STI ;Enable interrupts
   132                                  
   133 000060CF EB41                            jmp MainLoop
   134                                  
   135                                  writeRegAddrDump:
   136 000060D1 50                              push AX
   137 000060D2 B80060                          mov AX, dramcseg ; Segmento DRAM
   138 000060D5 8EC0                            mov ES, AX
   139 000060D7 58                              pop AX
   140 000060D8 26A30000                        mov word es:[reg_addr_dump], AX
   141 000060DC 268B1E0000                      mov bx, word es:[reg_addr_dump]
   142 000060E1 C3                              ret
   143                                  
   144                                  ReadLine:
   145 000060E2 B100                            mov cl,0x0
   146 000060E4 BB0200                          mov  bx,  reg_buff_read
   147                                  loop:
   148 000060E7 E82301                          call printPrompt
   149                                  loopP:  ;RX blocante
   150 000060EA E8F801                          call UART_RX_blct       
   151                                   ;       jnc  loopP
   152 000060ED E80202                          call printch
   153                                  
   154 000060F0 268807                          mov  byte es:[bx], al 
   155 000060F3 26C6470100                      mov  byte es:[bx+1], 0x0 
   156 000060F8 43                              inc  bx
   157                                  
   158 000060F9 3C41                            cmp  AL, 0x41
   159 000060FB 7429                            jz   tbled1
   160 000060FD 3C42                            cmp  AL, 0x42
   161 000060FF 742C                            jz   tbled2
   162                                  
   163 00006101 3C0A                            CMP  AL, 0x0A
   164 00006103 75E5                            JNZ  loopP
   165 00006105 E80B01                          call printLf
   166 00006108 E80201                          call printPrompt
   167 0000610B BB0200                          mov  BX, reg_buff_read
   168 0000610E E83C02                          call printFromDram
   169 00006111 C3                              ret
   170                                  
   171                                  MainLoop:
   172 00006112 E81100                          CALL tbled1
   173 00006115 B9FF1F                          mov cx, 0x1fFF
   174 00006118 E84202                  	call	basicDelay    
   175 0000611B E80F00                          CALL tbled2
   176 0000611E B9FF1F                          mov cx, 0x1fFF
   177 00006121 E83902                  	call	basicDelay    
   178                                  
   179                                  ;;        call ReadLine
   180 00006124 EBEC                            jmp MainLoop       
   181                                  
   182                                  tbled1: 
   183 00006126 E461                            in  al, 0x61
   184 00006128 0C08                            or  al, 0x08 
   185 0000612A E661                            out 0x61, al
   186 0000612C C3                              ret
   187                                  tbled2:
   188 0000612D E461                            in  al, 0x61
   189 0000612F 24F7                            and al, 0xF7
   190 00006131 E661                            out 0x61, al
   191 00006133 C3                                ret
   192                                  
   193                                  LOAD_INT_VECTOR_TABLE:
   194 00006134 FC                      	CLD
   195 00006135 B80000                  	MOV AX, 0X0000
   196 00006138 8EC0                    	MOV ES, AX
   197 0000613A BF0000                  	MOV DI, 0X0000
   198 0000613D 8CC8                    	MOV AX, CS
   199 0000613F 8ED8                    	MOV DS, AX
   200 00006141 BE[A064]                	MOV SI, INT_VECTOR_TABLE
   201 00006144 B98000                  	MOV CX, INT_VECTOR_TABLE.END - INT_VECTOR_TABLE
   202 00006147 F3A4                    	REP MOVSB
   203 00006149 C3                      	RET
   204                                  
   205                                  LOAD_BIOS_DATA_AREA:
   206 0000614A FC                      	CLD
   207 0000614B B84000                  	MOV AX, 0X0040
   208 0000614E 8EC0                    	MOV ES, AX
   209 00006150 BF0000                  	MOV DI, 0X0000
   210 00006153 8CC8                    	MOV AX, CS
   211 00006155 8ED8                    	MOV DS, AX
   212 00006157 BE[A863]                	MOV SI, BIOS_DATA_AREA
   213 0000615A B99800                  	MOV CX, BIOS_DATA_AREA.END - BIOS_DATA_AREA
   214 0000615D F3A4                    	REP MOVSB
   215 0000615F C3                      	RET
   216                                  
   217                                  INITIALIZE_8259:
   218 00006160 50                      	PUSH AX
   219                                  
   220 00006161 B013                    	MOV AL, 0X13		;ICW1
   221 00006163 E620                    	OUT 0X20, AL
   222 00006165 B008                    	MOV AL, 0X08		;ICW2
   223 00006167 E621                    	OUT 0X21, AL
   224 00006169 B009                    	MOV AL, 0X09		;ICW4
   225 0000616B E621                    	OUT 0X21, AL
   226                                  
   227                                          ;OCW1
   228                                          ;UNMASK IRQ0, IRQ1, IRQ6
   229 0000616D B0FC                    	MOV AL, 0XFC		
   230 0000616F E621                    	OUT 0X21, AL		
   231 00006171 58                      	POP AX
   232 00006172 C3                      	RET
   233                                  
   234                                  INITIALIZE_8253:
   235                                  
   236 00006173 50                      	PUSH AX
   237 00006174 51                      	PUSH CX
   238                                  
   239 00006175 B036                    	MOV AL, 0X36 		;00110110b  
   240                                  			        ;CHANNEL 0
   241                                  			        ;WRITE LOW BYTE THEN HIGH BYTE
   242                                  			        ;MODE 3 
   243                                  			        ;16 BIT COUNTER 
   244                                  			
   245 00006177 E643                    	OUT 0X43, AL		;CONTROL REG
   246                                  
   247 00006179 B9FFFF                  	MOV CX, 0XFFFF		;COUNT 
   248                                  
   249 0000617C 88C8                    	MOV AL, CL		;WRITE LOW BYTE OF COUNT
   250 0000617E E640                    	OUT 0X40, AL		;PORT 0X40
   251                                  			        ;INTERNAL FLIP-FLOP INC
   252 00006180 88E8                    	MOV AL, CH		;WRITE HIGH BYTE OF COUNT 
   253 00006182 E640                    	OUT 0X40, AL		;PORT 040
   254                                  
   255                                  	;;;;;;;;;;;
   256                                  	;TEST TONE
   257                                  	;;;;;;;;;;;
   258 00006184 B003                    	MOV AL, 0X03		;ENABLE SPK AND TIMMER 2 'GO'
   259 00006186 E661                    	OUT 0X61, AL		;PORT 0X61 CONTROL PORT
   260 00006188 B0B6                    	MOV AL, 0XB6
   261 0000618A E643                    	OUT 0X43, AL
   262 0000618C B000                    	MOV AL, 0X00
   263 0000618E E642                    	OUT 0X42, AL
   264 00006190 B005                    	MOV AL, 0X05
   265 00006192 E642                    	OUT 0X42, AL
   266                                  
   267 00006194 B9FFAF                  	mov cx, 0xafff
   268 00006197 E8C301                  	call	basicDelay
   269 0000619A B000                    	MOV AL, 0X00		;DISABLE SPK AND TIMMER 2 'GO'
   270 0000619C E661                    	OUT 0X61, AL		;PORT 0X61 CONTROL PORT
   271                                  
   272 0000619E 59                      	POP CX
   273 0000619F 58                      	POP AX
   274                                  
   275 000061A0 C3                      	RET          
   276                                  ;=================================
   277                                  ; Dump memory
   278                                  ; Memory address: bx
   279                                  ;        counter: cx
   280                                  dump:
   281 000061A1 1E                              PUSH DS
   282 000061A2 B800F0                          MOV  AX, 0xF000
   283 000061A5 8ED8                            MOV DS, AX
   284 000061A7 B110                            mov  Cl, 16
   285                                  
   286                                  dump_01:        
   287 000061A9 B00D                            mov  al, 0x0d
   288 000061AB E84401                          call UART_TX
   289 000061AE 89D8                            mov  AX, BX
   290 000061B0 E89D00                          call print_hex
   291 000061B3 B03A                            mov  al, ':'
   292 000061B5 E83A01                          call UART_TX
   293 000061B8 B020                            MOV  AL, ' '
   294 000061BA E83501                          CALL printch
   295                                          
   296                                          ;;Write 16 bytes em hexadecimal
   297 000061BD B510                            MOV  CH, 16
   298                                  dump_02:
   299 000061BF 3E8A07                          MOV  AL, DS:[BX]
   300 000061C2 E85C00                          CALL byte_to_hex_str
   301 000061C5 50                              PUSH AX
   302 000061C6 E82901                          CALL printch
   303 000061C9 58                              POP  AX
   304 000061CA 88E0                            MOV  AL, AH
   305 000061CC E82301                          CALL printch
   306 000061CF B020                            MOV  AL, ' '
   307 000061D1 E81E01                          CALL printch
   308 000061D4 43                              INC  BX
   309 000061D5 FECD                            DEC  CH
   310 000061D7 75E6                            JNZ  dump_02
   311                                          ;;Wrote 16 bytes
   312                                  
   313 000061D9 B020                            MOV  AL, ' '
   314 000061DB E81401                          CALL printch
   315                                  
   316 000061DE 83EB10                          SUB  BX, 16
   317                                  
   318                                          ;;Write 16 bytes em ASCII
   319 000061E1 B510                            MOV  CH, 16
   320                                  dump_03:
   321 000061E3 3E8A07                          MOV  AL, DS:[BX]
   322 000061E6 3C20                            CMP  AL, 0x20
   323 000061E8 720E                            JC  printPonto ; Flag carry set to 1 AL < 0x20
   324 000061EA 3C80                            CMP  AL, 0x80
   325 000061EC 730A                            JnC  printPonto ; Flag carry set to 0 AL > 0x80
   326 000061EE E80101                          CALL printch
   327 000061F1 43                              INC  BX
   328 000061F2 FECD                            DEC  CH
   329 000061F4 75ED                            JNZ  dump_03
   330 000061F6 EB0A                            jmp  dump_Fim
   331                                  printPonto:        
   332 000061F8 B02E                            MOV  AL, '.'
   333 000061FA E8F500                          CALL printch
   334 000061FD 43                              INC  BX
   335 000061FE FECD                            DEC  CH
   336 00006200 75E1                            JNZ  dump_03
   337                                          ;;Wrote 16 bytes
   338                                  
   339                                  dump_Fim:
   340 00006202 FEC9                            DEC  CL
   341 00006204 75A3                            JNZ  dump_01
   342 00006206 B00D                            mov  al, 0x0d
   343 00006208 E8E700                          call UART_TX
   344 0000620B 1F                              POP DS
   345 0000620C C3                              ret
   346                                  
   347                                  printPrompt:
   348 0000620D B03E                            mov al, '>'
   349 0000620F E8E000                          call printch
   350 00006212 C3                              ret
   351                                  
   352                                  printLf:
   353 00006213 B00D                            mov al, 0x0D
   354 00006215 E8DA00                          call printch
   355 00006218 C3                              ret
   356                                  
   357                                  writeRam:
   358 00006219 268807                          mov byte ES:[BX], AL
   359 0000621C C3                              ret
   360                                  readRam:
   361 0000621D 268A07                          mov AL, byte ES:[BX]
   362 00006220 C3                              ret
   363                                  ;byte_to_hex_str
   364                                  ;This function return in AX the ascii code for hexadecimal number from 0 to F
   365                                  ;Parameters:
   366                                  ;               AL = imput
   367                                  ;               AX = output
   368                                  ;Changes CL
   369                                  byte_to_hex_str:
   370 00006221 51                              PUSH CX
   371 00006222 88C4                            mov ah, al
   372 00006224 B104                            mov cl, 4
   373 00006226 D2E8                            shr al, cl
   374 00006228 250F0F                          and ax, 0x0f0f
   375 0000622B 3C09                            cmp al, 0x09
   376 0000622D 7602                            jbe .1
   377 0000622F 0407                            add al, 'A' - '0' - 10
   378                                  .1:
   379 00006231 80FC09                          cmp ah, 0x09
   380 00006234 7603                            jbe .2
   381 00006236 80C407                          add ah, 'A' - '0' - 10
   382                                  .2:
   383 00006239 053030                          add ax, "00"
   384                                  .ret:
   385 0000623C 59                              POP CX
   386 0000623D C3                              ret
   387                                  
   388                                  ;=========================================================================
   389                                  ; print_digit - print hexadecimal digit
   390                                  ; Input:
   391                                  ;	AL - bits 3...0 - digit to print (0...F)
   392                                  ; Output:
   393                                  ;	none
   394                                  ;-------------------------------------------------------------------------
   395                                  print_digit:
   396 0000623E 50                      	push	ax
   397 0000623F 53                      	push	bx
   398 00006240 240F                    	and	al,0Fh
   399 00006242 0430                    	add	al,'0'			; convert to ASCII
   400 00006244 3C39                    	cmp	al,'9'			; less or equal 9?
   401 00006246 7602                    	jna	.1
   402 00006248 0407                    	add	al,'A'-'9'-1		; a hex digit
   403                                  .1:
   404 0000624A E8A500                          call    printch
   405 0000624D 5B                      	pop	bx
   406 0000624E 58                      	pop	ax
   407 0000624F C3                      	ret
   408                                  
   409                                  ;=========================================================================
   410                                  ; print_hex - print 16-bit number in hexadecimal
   411                                  ; Input:
   412                                  ;	AX - number to print
   413                                  ; Output:
   414                                  ;	none
   415                                  ;-------------------------------------------------------------------------
   416                                  print_hex:
   417 00006250 86C4                    	xchg	al,ah
   418 00006252 E80600                  	call	print_byte		; print the upper byte
   419 00006255 86C4                    	xchg	al,ah
   420 00006257 E80100                  	call	print_byte		; print the lower byte
   421 0000625A C3                      	ret
   422                                  ;=========================================================================
   423                                  ; print_byte - print a byte in hexadecimal
   424                                  ; Input:
   425                                  ;	AL - byte to print
   426                                  ; Output:
   427                                  ;	none
   428                                  ;-------------------------------------------------------------------------
   429                                  print_byte:
   430 0000625B D0C0                    	rol	al,1
   431 0000625D D0C0                    	rol	al,1
   432 0000625F D0C0                    	rol	al,1
   433 00006261 D0C0                    	rol	al,1
   434 00006263 E8D8FF                  	call	print_digit
   435 00006266 D0C0                    	rol	al,1
   436 00006268 D0C0                    	rol	al,1
   437 0000626A D0C0                    	rol	al,1
   438 0000626C D0C0                    	rol	al,1
   439 0000626E E8CDFF                  	call	print_digit
   440 00006271 C3                      	ret
   441                                  
   442                                  %include "DRV16C550_8088.asm"		
     1                              <1>         CPU 8086
     2                              <1>         BITS 16
     3                              <1> 
     4                              <1> ; Port
     5 00006272 F803                <1> COM1:	DW		0x3F8
     6                              <1> ; Here are the port numbers for various UART registers:
     7                              <1> uart_tx_rx 		EQU  0x3f8 ; 0 DLAB = 0 for Regs. TX and RX
     8                              <1> uart_DLL 		EQU  0x3f8 ; 0 DLAB = 1 Divisor lacth low
     9                              <1> uart_IER 		EQU  0x3f9 ; 1 DLAB = 0 Interrupt Enable Register
    10                              <1> uart_DLH 		EQU  0x3f9 ; 1 DLAB = 1 Divisor lacth high
    11                              <1> uart_ISR 		EQU  0x3fa ; 2 IIR Interrupt Ident. Register READ ONLY
    12                              <1> uart_FCR 		EQU  0x3fa ; 2 Fifo Control Resgister WRITE ONLY
    13                              <1> uart_LCR 		EQU  0x3fb ; 3 Line Control Register
    14                              <1> uart_MCR 		EQU  0x3fc ; 4 Modem Control Register
    15                              <1> uart_LSR 		EQU  0x3fd ; 5 Line Status Register
    16                              <1> uart_MSR 		EQU  0x3fe ; 6 Modem Status Register
    17                              <1> uart_scratch 	EQU  0x3ff ; 7 SCR Scratch Register
    18                              <1> 
    19                              <1> UART_FREQUENCY		equ 4915000
    20                              <1> ;Fomula UART_FREQUENCY/(  9600 * 16)
    21                              <1> ;Baudrates
    22                              <1> UART_BAUD_9600		EQU 32
    23                              <1> UART_BAUD_19200		EQU 16
    24                              <1> UART_BAUD_38400		EQU  8
    25                              <1> UART_BAUD_56800		EQU  5
    26                              <1> UART_BAUD_115200	EQU  3
    27                              <1> UART_BAUD_230400	EQU  1
    28                              <1> 
    29                              <1> UART_TX_WAIT		EQU	0x7fff		; Count before a TX times out
    30                              <1> 
    31 00006274 53657269616C206472- <1> msg0_01:   db "Serial driver for 16C550",0
    31 0000627D 6976657220666F7220- <1>
    31 00006286 31364335353000      <1>
    32                              <1> ;configure_uart
    33                              <1> ;Parameters:None
    34                              <1> ;			
    35                              <1> ;			
    36                              <1> configure_uart:
    37 0000628D B9FF1F              <1> 			mov cx, 0x1fff
    38 00006290 E8CA00              <1> 			call	basicDelay
    39 00006293 B000                <1> 			MOV		AL,0x0	 		;
    40 00006295 BAF903              <1> 			MOV		DX, uart_IER
    41 00006298 EE                  <1> 			OUT  	DX,	AL	; Disable interrupts
    42                              <1> 
    43 00006299 B91F00              <1> 			mov cx, 0x1f
    44 0000629C E8BE00              <1> 			call	basicDelay
    45                              <1> 
    46 0000629F B080                <1> 			MOV		AL, 0x80			;
    47 000062A1 BAFB03              <1> 			MOV		DX, uart_LCR
    48 000062A4 EE                  <1> 			OUT     DX,	AL 	; Turn DLAB on
    49 000062A5 B91F00              <1> 			mov cx, 0x1f
    50 000062A8 E8B200              <1> 			call	basicDelay
    51                              <1> 
    52 000062AB B008                <1> 			MOV		AL, UART_BAUD_38400 ;0x08
    53 000062AD BAF803              <1> 			MOV		DX, uart_DLL
    54 000062B0 EE                  <1> 			OUT     DX,   AL	; Set divisor low
    55 000062B1 B91F00              <1> 			mov cx, 0x1f
    56 000062B4 E8A600              <1> 			call	basicDelay
    57                              <1> 
    58 000062B7 B000                <1> 			MOV		AL, 0x00		;
    59 000062B9 BAF903              <1> 			MOV		DX, uart_DLH
    60 000062BC EE                  <1> 			OUT     DX,	AL	; Set divisor high
    61 000062BD B91F00              <1> 			mov cx, 0x1f
    62 000062C0 E89A00              <1> 			call	basicDelay
    63                              <1> 
    64 000062C3 B003                <1> 			MOV     AL, 0x03	; AH	
    65 000062C5 BAFB03              <1> 			MOV		DX, uart_LCR
    66 000062C8 EE                  <1> 			OUT     DX,	AL	; Write out flow control bits 8,1,N
    67 000062C9 B91F00              <1> 			mov cx, 0x1f
    68 000062CC E88E00              <1> 			call	basicDelay
    69                              <1> 
    70 000062CF B081                <1> 			MOV 	AL,0x81			;
    71 000062D1 BAFA03              <1> 			MOV		DX, uart_ISR
    72 000062D4 EE                  <1> 			OUT     DX,	AL	; Turn on FIFO, with trigger level of 8.
    73                              <1> 								                ; This turn on the 16bytes buffer!
    74 000062D5 C3                  <1> 			RET
    75                              <1> ;UART_RX:
    76                              <1> ;Parameters: 
    77                              <1> ;			AL = return the available character
    78                              <1> ;			If al returns with a valid char flag carry is set, otherwise
    79                              <1> ;			flag carry is clear
    80                              <1> UART_RX:	
    81 000062D6 BAFD03              <1> 			MOV DX, uart_LSR
    82 000062D9 EC                  <1> 			IN	AL, DX	 		; Get the line status register
    83 000062DA 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    84 000062DC F8                  <1> 			CLC 				; Clear carry
    85 000062DD 7405                <1> 			JZ	END				; Just ret (with carry clear) if no characters
    86 000062DF BAF803              <1> 			MOV DX, uart_tx_rx
    87 000062E2 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    88 000062E3 F9                  <1> 			STC 				; Set the carry flag
    89                              <1> END:			
    90 000062E4 C3                  <1> 			RET
    91                              <1> 
    92                              <1> UART_RX_blct:	
    93 000062E5 BAFD03              <1> 			MOV DX, uart_LSR
    94 000062E8 EC                  <1> 			IN	AL, DX	 		; Get the line status register
    95 000062E9 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    96 000062EB 74F8                <1> 			JZ	UART_RX_blct	; Just loopif no characters
    97 000062ED BAF803              <1> 			MOV DX, uart_tx_rx
    98 000062F0 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    99 000062F1 C3                  <1> 			RET
   100                              <1> 
   101                              <1> 
   102                              <1> printch:
   103                              <1> UART_TX:	
   104 000062F2 52                  <1> 			PUSH DX
   105 000062F3 51                  <1> 			PUSH CX 	
   106 000062F4 53                  <1> 			PUSH BX
   107 000062F5 50                  <1> 			PUSH AX
   108 000062F6 BBFF7F              <1> 			MOV BX, UART_TX_WAIT	; Set CB to the transmit timeout
   109                              <1> LOOP_UART_TX:
   110 000062F9 BAFD03              <1> 			MOV DX, uart_LSR
   111 000062FC EC                  <1> 			IN	AL,	DX 				; Get the line status register
   112 000062FD 2460                <1> 			AND AL, 0x60			; Check for TX empty
   113 000062FF 750D                <1> 			JNZ	OUT_UART_TX			; If set, then TX is empty, goto transmit
   114 00006301 B9FF17              <1> 			mov	cx, 0x17ff
   115 00006304 E85600              <1> 			call basicDelay
   116 00006307 4B                  <1> 			DEC	BX
   117 00006308 75EF                <1> 			JNZ LOOP_UART_TX		; Otherwise loop
   118 0000630A 58                  <1> 			POP	AX					; We've timed out at this point so
   119 0000630B 5B                  <1> 			POP BX
   120 0000630C F8                  <1> 			CLC						; Clear the carry flag and preserve AX
   121 0000630D C3                  <1> 			RET
   122                              <1> OUT_UART_TX:
   123 0000630E 58                  <1> 			POP	AX					; Good to send at this point, so	
   124 0000630F 3C0D                <1> 			CMP AL, 0x0D
   125 00006311 740F                <1> 			JZ  println
   126 00006313 BAF803              <1> 			MOV	DX, uart_tx_rx
   127 00006316 EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   128 00006317 B9FF02              <1> 			mov	cx, 0x2ff
   129 0000631A E84000              <1> 			call basicDelay
   130 0000631D 5B                  <1> 			POP BX
   131 0000631E 59                  <1> 			POP CX
   132 0000631F 5A                  <1> 			POP DX
   133 00006320 F9                  <1> 			STC						; Set carry flag
   134 00006321 C3                  <1> 			RET
   135                              <1> println:
   136 00006322 BAF803              <1> 			MOV	DX, uart_tx_rx
   137 00006325 EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   138 00006326 B9FF00              <1> 			mov	cx, 0xff
   139 00006329 E83100              <1> 			call basicDelay
   140 0000632C B00A                <1> 			MOV AL, 0x0A
   141 0000632E BAF803              <1> 			MOV	DX, uart_tx_rx
   142 00006331 EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   143 00006332 B9FF00              <1> 			mov	CX, 0xff
   144 00006335 E82500              <1> 			call basicDelay
   145 00006338 5B                  <1> 			POP BX	
   146 00006339 59                  <1> 			POP CX
   147 0000633A 5A                  <1> 			POP DX
   148 0000633B F9                  <1> 			STC						; Set carry flag
   149 0000633C C3                  <1> 			RET
   150                              <1> 
   151                              <1> ;print
   152                              <1> ;parameters:
   153                              <1> ;          bx = message address
   154                              <1> ;
   155                              <1> ;print:
   156                              <1> ;        	mov  al,byte ds:[bx]
   157                              <1> ;        	cmp  al,0h
   158                              <1> ;        	jz   fimPrint;
   159                              <1> ;
   160                              <1> ;			MOV	DX, uart_tx_rx
   161                              <1> ; ;       	OUT	DX, AL
   162                              <1> ;			mov	cx, 0xff
   163                              <1> ;			call basicDelay
   164                              <1> ;
   165                              <1> ;        	inc  bx
   166                              <1> ;        	jmp  print
   167                              <1> ;fimPrint:   ret
   168                              <1> 
   169                              <1> print2:
   170 0000633D 3E8A07              <1>         	mov  al,byte ds:[bx]
   171 00006340 3C00                <1>         	cmp  al,0h
   172 00006342 7408                <1>         	jz   fimPrint2
   173                              <1> cont:
   174 00006344 E8ABFF              <1> 			call UART_TX
   175 00006347 73FB                <1> 			JNC	cont
   176                              <1> 
   177 00006349 43                  <1>         	inc  bx
   178 0000634A EBF1                <1>         	jmp  print2
   179 0000634C C3                  <1> fimPrint2:   ret		
   180                              <1> 
   181                              <1> printFromDram:
   182 0000634D 268A07              <1>         	mov  al,byte es:[bx]
   183 00006350 3C00                <1>         	cmp  al,0h
   184 00006352 7408                <1>         	jz   fimPrintFromDram
   185                              <1> 
   186                              <1> contFromDram:
   187 00006354 E89BFF              <1> 			call UART_TX
   188 00006357 73FB                <1> 			JNC	contFromDram
   189 00006359 43                  <1>         	inc  bx
   190 0000635A EBF1                <1>         	jmp  printFromDram
   191                              <1> 
   192                              <1> fimPrintFromDram:  
   193 0000635C C3                  <1> 			ret		
   194                              <1> 
   195                              <1> ;print3:
   196                              <1> ;        	mov  al,byte ds:[bx]
   197                              <1> ;        	cmp  al,0h
   198                              <1> ;        	jz   fimPrint3
   199                              <1> ;
   200                              <1> ;			MOV	DX, uart_tx_rx
   201                              <1> ;			OUT	DX, AL		; Write the character to the UART transmit buffer
   202                              <1> ;			mov	cx, 0xff
   203                              <1> ;			call basicDelay
   204                              <1> ;
   205                              <1> ;        	inc  bx
   206                              <1> ;        	jmp  print2
   207                              <1> ;fimPrint3:   ret		
   208                              <1> 
   209                              <1> 	
   210                              <1> basicDelay:
   211 0000635D 49                  <1>         dec cx
   212 0000635E 75FD                <1>         jnz basicDelay
   213 00006360 C3                  <1>         ret
   443                                  ;%include "serial1.inc"	
   444                                  ;%include "serial2.inc"	
   445                                  ;%include "errno.inc"	
   446                                  ;%include "messages.inc"	
   447                                  %include "screen.asm"	
     1                              <1> 
     2 00006361 1B5B324A00          <1> cls     db 0x1B,"[2J",0
     3 00006366 1B5B213B214800      <1> curpos  db 0x1B,"[!;!H",0
     4                              <1> 
     5                              <1> ;=====================
     6                              <1> ; ESC [ 2 J
     7                              <1> ;
     8                              <1> scr_clear:
     9 0000636D BB[6163]            <1>         mov	bx, cls
    10 00006370 E8CAFF              <1>         call print2	
    11 00006373 C3                  <1>         ret
    12                              <1> ;=====================
    13                              <1> ; ESC [ Pl ; Pc H
    14                              <1> ; input:
    15                              <1> ;	dh = y position
    16                              <1> ; 	dl = x position
    17                              <1> ; MARK: scr_goto
    18                              <1> scr_goto:
    19 00006374 1E                  <1>         push DS
    20 00006375 B80000              <1>         mov AX, 0x0
    21 00006378 8ED8                <1>         mov DS, AX
    22 0000637A 89C3                <1>         mov bx, AX
    23 0000637C 3EC6071B            <1>         mov byte ds:[bx],0x1B
    24 00006380 43                  <1>         inc bx
    25 00006381 3EC6075B            <1>         mov byte ds:[bx],'['
    26 00006385 43                  <1>         inc bx
    27 00006386 3EC6070A            <1>         mov byte ds:[bx],10
    28 0000638A 43                  <1>         inc bx
    29 0000638B 3EC6073B            <1>         mov byte ds:[bx],';'
    30 0000638F 43                  <1>         inc bx
    31 00006390 3EC6070A            <1>         mov byte ds:[bx],10
    32 00006394 43                  <1>         inc bx
    33 00006395 3EC60748            <1>         mov byte ds:[bx],'H'  
    34 00006399 43                  <1>         inc bx
    35 0000639A 3EC60700            <1>         mov byte ds:[bx],0x0
    36                              <1> 
    37                              <1> 
    38 0000639E B80000              <1>         mov AX, 0x0
    39 000063A1 89C3                <1>         mov bx, AX
    40 000063A3 E897FF              <1>         call print2
    41 000063A6 1F                  <1>         POP DS
    42 000063A7 C3                  <1> 		ret
    43                              <1> 
    44                              <1> 
   448                                  
   449                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   450                                  ;BIOS DATA AREA
   451                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   452                                  %INCLUDE "asm/bios_data.asm"
     1                              <1> BIOS_DATA_AREA:
     2                              <1> 	;0x0400 (4 words)	IO ports for COM1-COM4 serial (each address is 1 word, zero if none)
     3 000063A8 0000                <1> 	DW 0X0000
     4 000063AA 0000                <1> 	DW 0X0000
     5 000063AC 0000                <1> 	DW 0X0000
     6 000063AE 0000                <1> 	DW 0X0000
     7                              <1> 
     8                              <1> 	;0x0408 (4 words)	IO ports for LPT1-LPT4 parallel (each address is 1 word, zero if none)
     9 000063B0 0000                <1> 	DW 0X0000
    10 000063B2 0000                <1> 	DW 0X0000
    11 000063B4 0000                <1> 	DW 0X0000
    12 000063B6 0000                <1> 	DW 0X0000	;!!
    13                              <1> 
    14                              <1> 	;0x0410 (word)		(Equip Flag) packed bit flags for detected hardware
    15                              <1> 	;look up number google, right now one floppy drive, 80x25 color, no coprocessor
    16 000063B8 2D00                <1> 	DW 0X002D
    17                              <1> 
    18                              <1> 	;0x0412	 (byte)		MFG test
    19 000063BA 01                  <1> 	DB 0x01
    20                              <1> 
    21                              <1> 	;0x0413 (word)		Memory Size
    22 000063BB 0002                <1> 	DW 0x0200			;200 512K, 
    23                              <1> 
    24                              <1> 	;0x0415 (word)		IO Ram Size
    25 000063BD 0000                <1> 	DW 0x0000
    26                              <1> 
    27                              <1> 	;0x0417 (byte)		keyboard state flag 0
    28 000063BF 00                  <1> 	DB 0X00
    29                              <1> 
    30                              <1> 	;0x0418 (byte)		keyboard state flag 1
    31 000063C0 00                  <1> 	DB 0X00	
    32                              <1> 
    33                              <1> 	;0x0419 (byte)		ALT_INPUT
    34 000063C1 00                  <1> 	DB 0X00	
    35                              <1> 
    36                              <1> 	;0x041A (word) 		keyboard head 
    37 000063C2 1E00                <1> 	DW 0x001E
    38                              <1> 
    39                              <1> 	;0x041C (word)		keyboard tail
    40 000063C4 1E00                <1> 	DW 0x001E 
    41                              <1> 
    42                              <1> 	;0x041E (32 bytes)	keyboard buffer
    43 000063C6 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    44 000063CA 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    45 000063CE 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    46 000063D2 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    47 000063D6 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    48 000063DA 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    49 000063DE 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    50 000063E2 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    51                              <1> 
    52                              <1> 	;0x043E 		DISKETTE DATA AREAS
    53 000063E6 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    54 000063EA 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
    55 000063EE 000000              <1> 	DB 0X00, 0X00, 0X00
    56                              <1> 
    57                              <1> 	;0x0449 (byte)		Display Mode [VIDEO DISPLAY DATA AREA]
    58 000063F1 03                  <1> 	DB 0X03				;80x25  8x8   640x200   16 Colors 0xB800 CGA
    59                              <1> 
    60                              <1> 	;0x044A (word)		number of columns in text mode
    61 000063F2 1400                <1> 	DW 0X0014
    62                              <1> 
    63                              <1> 	;0X044C (word)
    64 000063F4 0000                <1> 	DW 0X0000
    65                              <1> 
    66                              <1> 	;0X044E (word)
    67 000063F6 0000                <1> 	DW 0X0000	
    68                              <1> 
    69                              <1> 	;0X0450 (16 BYTE AS WORD)	:CURSOR_POSN 8 PAGES   col, row
    70 000063F8 00000000            <1> 	DW 0X0000, 0X0000
    71 000063FC 00000000            <1> 	DW 0X0000, 0X0000
    72 00006400 00000000            <1> 	DW 0X0000, 0X0000
    73 00006404 00000000            <1> 	DW 0X0000, 0X0000
    74                              <1> 
    75                              <1> 	;0X0460 (word)		Cursor Mode
    76 00006408 0000                <1> 	DW 0X0000
    77                              <1> 	;0x0462			Active Page
    78 0000640A 00                  <1> 	DB 0X00
    79                              <1> 
    80                              <1> 	;0x0463 (2 bytes, taken as a word)	base IO port for video
    81 0000640B 00                  <1> 	DB 0X00
    82 0000640C 00                  <1> 	DB 0X00
    83                              <1> 
    84                              <1> 	;0x0465	(byte)
    85 0000640D 00                  <1> 	DB 0x00
    86                              <1> 
    87                              <1> 	;0x0466	(byte)
    88 0000640E 00                  <1> 	DB 0x00
    89                              <1> 
    90                              <1> 	;0x0467	(word)
    91 0000640F 0000                <1> 	DW 0x0000
    92                              <1> 
    93                              <1> 	;0x0469	(word)
    94 00006411 0000                <1> 	DW 0x0000
    95                              <1> 
    96                              <1> 	;0x046B	(byte)
    97 00006413 00                  <1> 	DB 0x00
    98                              <1> 
    99                              <1> 	;0x046C (word)		# of IRQ0 timer ticks since boot
   100 00006414 0000                <1> 	DW 0X0000
   101 00006416 0000                <1> 	DW 0X0000
   102                              <1> 
   103                              <1> 	;LATER 0x0470
   104 00006418 0000                <1> 	DB 0X00, 0X00
   105 0000641A 000000              <1> 	DB 0X00, 0X00, 0X00
   106                              <1> 	;
   107                              <1> 	
   108                              <1> 	;0x0475 (byte)		# of hard disk drives detected
   109 0000641D 00                  <1> 	DB 0X00
   110                              <1> 	
   111                              <1> 	;LATER 0x0476
   112 0000641E 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
   113 00006422 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
   114 00006426 0000                <1> 	DB 0X00, 0X00
   115                              <1> 	;
   116                              <1> 	
   117                              <1> 	;0x0480 (word)		keyboard buffer start
   118 00006428 1E00                <1> 	DW 0X001E
   119                              <1> 	;0x0482 (word)		keyboard buffer end
   120 0000642A 3E00                <1> 	DW 0X003E
   121                              <1> 	
   122                              <1> 	;LATER 0x0484
   123 0000642C 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
   124 00006430 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
   125 00006434 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
   126 00006438 00000000            <1> 	DB 0X00, 0X00, 0X00, 0X00
   127 0000643C 000000              <1> 	DB 0X00, 0X00, 0X00
   128                              <1> 	
   129                              <1> 	;0x0497 (byte)		last keyboard LED/Shift key state
   130 0000643F 00                  <1> 	DB 0X00	
   131                              <1> 
   132                              <1> .END:
   133                              <1> 
   134                              <1> 
   135                              <1> 
   136                              <1> 
   137                              <1> 
   138                              <1> .CHARACTER_CODES_UPPERCASE:
   139 00006440 001B21402324255E26- <1> DB 0X00, 0X1B, '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', 0X08, 0X09 ;0X00-0X0F
   139 00006449 2A28295F2B0809      <1>
   140 00006450 51574552545955494F- <1> DB 'Q','W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', 0X0D, 0x00, 'A', 'S'    ;0X10-0X1F
   140 00006459 507B7D0D004153      <1>
   141 00006460 444647484A4B4C3A22- <1> DB 'D','F', 'G', 'H', 'J', 'K', 'L', ':', '"', '~', 0x00, '|', 'Z', 'X', 'C', 'V'     ;0X20-0X2F
   141 00006469 7E007C5A584356      <1>
   142                              <1> .CHARACTER_CODES_LOWERCASE:
   143 00006470 001B31323334353637- <1> DB 0X00, 0X1B, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 0X08, 0X09 ;0X00-0X0F
   143 00006479 3839302D3D0809      <1>
   144 00006480 71776572747975696F- <1> DB 'q','w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', 0X0D, 0x00, 'a', 's'    ;0X10-0X1F
   144 00006489 705B5D0D006173      <1>
   145 00006490 646667686A6B6C3B27- <1> DB 'd','f', 'g', 'h', 'j', 'k', 'l', ';', 0x27, '`', 0x00, 0X5C, 'z', 'x', 'c', 'v'   ;0X20-0X2F
   145 00006499 60005C7A786376      <1>
   146                              <1> .CHARACTER_CODES_CTRL:
   453                                  
   454                                  
   455                                  INT_VECTOR_TABLE:
   456 000064A0 [2065]00F8              	DW INT00, 0xF800
   457 000064A4 [3065]00F8              	DW INT01, 0xF800
   458 000064A8 [4065]00F8              	DW INT02, 0xF800
   459 000064AC [5065]00F8              	DW INT03, 0xF800
   460 000064B0 [6065]00F8              	DW INT04, 0xF800
   461 000064B4 [7065]00F8              	DW INT05, 0xF800
   462 000064B8 [8065]00F8              	DW INT06, 0xF800
   463 000064BC [9065]00F8              	DW INT07, 0xF800
   464 000064C0 [A065]00F8              	DW INT08, 0xF800
   465 000064C4 [BF65]00F8              	DW INT09, 0xF800
   466 000064C8 [FB66]00F8              	DW INT0A, 0xF800
   467 000064CC [0A67]00F8              	DW INT0B, 0xF800
   468 000064D0 [1967]00F8              	DW INT0C, 0xF800
   469 000064D4 [2867]00F8              	DW INT0D, 0xF800
   470 000064D8 [3767]00F8              	DW INT0E, 0xF800
   471 000064DC [4667]00F8              	DW INT0F, 0xF800
   472 000064E0 [5567]00F8              	DW INT10, 0xF800
   473 000064E4 [7F6E]00F8              	DW INT11, 0xF800
   474 000064E8 [8E6E]00F8              	DW INT12, 0xF800
   475 000064EC [9D6E]00F8              	DW INT13, 0xF800
   476 000064F0 [6272]00F8              	DW INT14, 0xF800
   477 000064F4 [6372]00F8              	DW INT15, 0xF800
   478 000064F8 [7E72]00F8              	DW INT16, 0xF800
   479 000064FC [EF72]00F8              	DW INT17, 0xF800
   480 00006500 [F072]00F8              	DW INT18, 0xF800
   481 00006504 [0073]00F8              	DW INT19, 0xF800
   482 00006508 [0573]00F8              	DW INT1A, 0xF800
   483 0000650C [1F73]00F8              	DW INT1B, 0xF800
   484 00006510 [2F73]00F8              	DW INT1C, 0xF800
   485 00006514 [3F73]00F8              	DW INT1D, 0xF800
   486 00006518 [4F73]00F8              	DW INT1E, 0xF800
   487 0000651C [5F73]00F8              	DW INT1F, 0xF800
   488                                  .END:
   489                                  INT00: ;Divide by Zero
   490 00006520 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   491 00006522 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   492 00006524 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   493 00006526 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   494 00006528 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   495 0000652A B030                    	MOV AL, '0'		;SET AL TO CHAR
   496 0000652C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   497 0000652E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   498 0000652F CF                      	IRET		;RETURN FROM INTERRUPT
   499                                  
   500                                  INT01: ;Single Step
   501 00006530 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   502 00006532 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   503 00006534 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   504 00006536 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   505 00006538 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   506 0000653A B031                    	MOV AL, '1'		;SET AL TO CHAR
   507 0000653C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   508 0000653E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   509 0000653F CF                      	IRET		;RETURN FROM INTERRUPT
   510                                  
   511                                  INT02: ;Nonmaskable 
   512 00006540 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   513 00006542 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   514 00006544 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   515 00006546 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   516 00006548 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   517 0000654A B032                    	MOV AL, '2'		;SET AL TO CHAR
   518 0000654C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   519 0000654E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   520 0000654F CF                      	IRET		;RETURN FROM INTERRUPT
   521                                  
   522                                  INT03: ;Breakpoint
   523 00006550 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   524 00006552 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   525 00006554 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   526 00006556 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   527 00006558 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   528 0000655A B033                    	MOV AL, '3'		;SET AL TO CHAR
   529 0000655C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   530 0000655E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   531 0000655F CF                      	IRET		;RETURN FROM INTERRUPT
   532                                  
   533                                  INT04: ;Overflow
   534 00006560 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   535 00006562 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   536 00006564 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   537 00006566 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   538 00006568 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   539 0000656A B034                    	MOV AL, '4'		;SET AL TO CHAR
   540 0000656C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   541 0000656E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   542 0000656F CF                      	IRET		;RETURN FROM INTERRUPT
   543                                  
   544                                  INT05: ;Print Screen
   545 00006570 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   546 00006572 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   547 00006574 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   548 00006576 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   549 00006578 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   550 0000657A B035                    	MOV AL, '5'		;SET AL TO CHAR
   551 0000657C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   552 0000657E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   553 0000657F CF                      	IRET		;RETURN FROM INTERRUPT
   554                                  
   555                                  INT06: ;Reserved
   556 00006580 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   557 00006582 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   558 00006584 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   559 00006586 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   560 00006588 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   561 0000658A B036                    	MOV AL, '6'		;SET AL TO CHAR
   562 0000658C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   563 0000658E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   564 0000658F CF                      	IRET		;RETURN FROM INTERRUPT
   565                                  
   566                                  INT07: ;Reserved
   567 00006590 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   568 00006592 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   569 00006594 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   570 00006596 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   571 00006598 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   572 0000659A B037                    	MOV AL, '7'		;SET AL TO CHAR
   573 0000659C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   574 0000659E F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   575 0000659F CF                      	IRET		;RETURN FROM INTERRUPT
   576                                  
   577                                  INT08: ;Reserved
   578 000065A0 50                      	PUSH AX			;STORE AX
   579 000065A1 53                      	PUSH BX			;STORE BX
   580 000065A2 1E                      	PUSH DS			;STORE DS
   581 000065A3 B84000                  	MOV AX, 0X0040			;BIOS DATA AREA
   582 000065A6 8ED8                    	MOV DS, AX			;SET DATA SEGMENT 
   583 000065A8 BB6C00                  	MOV BX, 0X006C			;SET BX TO TICK COUNTER
   584 000065AB FF07                    	INC WORD [BX]			;INC LOWER WORD TICK BY ONE
   585 000065AD 833F00                  	CMP WORD [BX], 0X0000			;CMP TO 0 TO SEE IF ROLLED OVER 	
   586 000065B0 7505                    	JNZ .END_INT08			;IF NOT END
   587 000065B2 83C302                  	ADD BX, 0X0002			;ADD 2 TO BX FOR NEXT WORD
   588 000065B5 FF07                    	INC WORD [BX]			;INC UPPER WORD
   589                                    .END_INT08:				;END LABEL
   590 000065B7 1F                      	POP DS			;RESTORE DS
   591 000065B8 5B                      	POP BX			;RESTORE BX
   592                                  
   593                                  
   594 000065B9 B020                        	MOV AL, 0x20
   595 000065BB E620                        	OUT 0x20, AL	
   596 000065BD 58                      	POP AX			;RESTORE AX
   597 000065BE CF                      	IRET			;RETURN FROM INTERRUPT	
   598                                  
   599                                  ;INT09:	
   600                                  %INCLUDE "asm/int09.asm"
     1                              <1> INT09:
     2 000065BF 50                  <1> 	PUSH AX			;STORE AX
     3 000065C0 53                  <1> 	PUSH BX			;STORE BX
     4 000065C1 1E                  <1> 	PUSH DS			;STORE DS
     5 000065C2 0E                  <1> 	PUSH CS
     6 000065C3 1F                  <1> 	POP DS
     7                              <1> 
     8 000065C4 B400                <1> 	MOV AH, 0X00	;CLEAR AH
     9 000065C6 E460                <1> 	IN AL, 0X60		;GET SCANCODE
    10 000065C8 3CE0                <1> 	CMP AL, 0XE0	;EXTENDED
    11 000065CA 742C                <1> 	JZ .END			;DO NOTHING FOR NOW
    12 000065CC 3C80                <1> 	CMP AL, 0X80	;BREAK CODES
    13 000065CE 7328                <1> 	JAE .END		;DO NOTHING FOR NOW
    14                              <1> 	
    15 000065D0 89C3                <1> 	MOV BX, AX		;SET INDEX
    16 000065D2 88C4                <1> 	MOV AH, AL		;SCAN CODE TO UPPER
    17 000065D4 8A87[0066]          <1> 	MOV AL, [BX+.CHARACTER_CODE_UPPER_CASE]
    18 000065D8 50                  <1> 	PUSH AX			;STORE SCAN CODE/ CHAR CODE
    19                              <1> 		
    20 000065D9 B84000              <1> 	MOV AX, 0X0040	;BIOS DATA SEGMENT 
    21 000065DC 8ED8                <1> 	MOV DS, AX		;SET DATA SEGMENT
    22 000065DE 8B1E1C00            <1> 	MOV BX, [0X001C];KEYBOARD HEAD LOCA
    23 000065E2 58                  <1> 	POP AX			;GET SCAN CODE/ CHAR CODE
    24                              <1> 	
    25 000065E3 8907                <1> 	MOV [BX], AX		;STORE IN KEYBOARD BUFFER
    26 000065E5 83C302              <1> 	ADD BX, 0X02		;INC TWICE
    27 000065E8 3B1E8200            <1> 	CMP BX, [0X0082]	;CHECK TO SEE IF ATT END OF BUFFER
    28 000065EC 7204                <1> 	JB .NOT_END_OF_BUFFER;JUMP OVER NEXT STEP IF NOT AT END
    29 000065EE 8B1E8000            <1> 	MOV BX, [0X0080]	;SET INDEX TO BEGINING  
    30                              <1>     .NOT_END_OF_BUFFER:
    31 000065F2 891E1C00            <1> 	MOV [0X001C], BX	;STORE NEW  LOCATION
    32                              <1> 	
    33                              <1> 	
    34                              <1> 	
    35 000065F6 EB00                <1> 	JMP .END
    36                              <1> 
    37                              <1> 	
    38                              <1> .END:
    39 000065F8 1F                  <1> 	POP DS			;RESTORE DS
    40 000065F9 5B                  <1> 	POP BX			;RESTORE BX
    41 000065FA B020                <1> 	MOV AL, 0x20		;END OF INTERRUPT
    42 000065FC E620                <1> 	OUT 0x20, AL	
    43 000065FE 58                  <1> 	POP AX
    44 000065FF CF                  <1> 	IRET	
    45                              <1> 
    46                              <1> .CHARACTER_CODE_UPPER_CASE:
    47 00006600 001B31323334353637- <1> DB 0X00, 0X1B, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_', '+', 0X08, 0X09	;0X0_
    47 00006609 3839305F2B0809      <1>
    48 00006610 51574552545955494F- <1> DB 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '[', ']', 0X0D, 0X00, 'A', 'S'	;0X1_
    48 00006619 505B5D0D004153      <1>
    49 00006620 444647484A4B4C3A27- <1> DB 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', 0X27, '~', 0X00, 0X5C, 'Z', 'X', 'C', 'V'	;0X2_
    49 00006629 7E005C5A584356      <1>
    50 00006630 424E4D3C3E3F002A00- <1> DB 'B', 'N', 'M', '<', '>', '?', 0X00, '*', 0X00, ' ', 0X00
    50 00006639 2000                <1>
    51                              <1> 	
    52                              <1> .FILL:
    53 0000663B 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    54 00006643 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    55 0000664B 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    56 00006653 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    57                              <1> 
    58 0000665B 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    59 00006663 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    60 0000666B 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    61 00006673 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    62                              <1> 
    63 0000667B 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    64 00006683 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    65 0000668B 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    66 00006693 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    67                              <1> 
    68 0000669B 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    69 000066A3 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    70 000066AB 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    71 000066B3 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    72                              <1> 
    73 000066BB 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    74 000066C3 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    75 000066CB 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    76 000066D3 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    77                              <1> 
    78 000066DB 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    79 000066E3 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    80 000066EB 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
    81 000066F3 0000000000000000    <1> DB 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00
   601                                  
   602                                  INT0A: ;Reserved
   603 000066FB B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   604 000066FD B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   605 000066FF CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   606 00006701 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   607 00006703 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   608 00006705 B041                    	MOV AL, 'A'		;SET AL TO CHAR
   609 00006707 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   610 00006709 CF                      	IRET		;RETURN FROM INTERRUPT	
   611                                  
   612                                  INT0B: ;Communications
   613 0000670A B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   614 0000670C B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   615 0000670E CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   616 00006710 B030                    	MOV AL, '0'		;SET AL TO CHAR	
   617 00006712 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   618 00006714 B042                    	MOV AL, 'B'		;SET AL TO CHAR
   619 00006716 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   620 00006718 CF                      	IRET		;RETURN FROM INTERRUPT	
   621                                  	
   622                                  INT0C: ;Communications
   623 00006719 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   624 0000671B B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   625 0000671D CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   626 0000671F B030                    	MOV AL, '0'		;SET AL TO CHAR	
   627 00006721 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   628 00006723 B043                    	MOV AL, 'C'		;SET AL TO CHAR
   629 00006725 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   630 00006727 CF                      	IRET		;RETURN FROM INTERRUPT			
   631                                  
   632                                  INT0D: ;Disk
   633 00006728 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   634 0000672A B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   635 0000672C CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   636 0000672E B030                    	MOV AL, '0'		;SET AL TO CHAR	
   637 00006730 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   638 00006732 B044                    	MOV AL, 'D'		;SET AL TO CHAR
   639 00006734 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   640 00006736 CF                      	IRET	
   641                                  INT0E: ;Disk
   642 00006737 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   643 00006739 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   644 0000673B CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   645 0000673D B030                    	MOV AL, '0'		;SET AL TO CHAR	
   646 0000673F CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   647 00006741 B045                    	MOV AL, 'E'		;SET AL TO CHAR
   648 00006743 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   649 00006745 CF                      	IRET	;RETURN FROM INTERRUPT
   650                                  INT0F: ;Printer
   651 00006746 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   652 00006748 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   653 0000674A CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   654 0000674C B030                    	MOV AL, '0'		;SET AL TO CHAR	
   655 0000674E CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   656 00006750 B046                    	MOV AL, 'F'		;SET AL TO CHAR
   657 00006752 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   658 00006754 CF                      	IRET		;RETURN FROM INTERRUPTINT0F:
   659                                  
   660                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   661                                  ;INT 0X10
   662                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   663                                  %INCLUDE "asm/int10.asm"
     1                              <1> ;40:49	byte	Current video mode
     2                              <1> ;40:4A	word	Number of screen columns
     3                              <1> ;40:4C	word	Size of current video regen buffer in bytes
     4                              <1> ;40:4E	word	Offset of current video page in video regen buffer
     5                              <1> ;40:50  8 words	Cursor position of pages 1-8, high order byte=row
     6                              <1> ;				low order byte=column; changing this data isn't
     7                              <1> ; 				reflected immediately on the display
     8                              <1> ;40:62	byte	Active display page number
     9                              <1> ;40:63	word	Base port address for active 6845 CRT controller
    10                              <1> ;				3B4h = mono, 3D4h = color
    11                              <1> ;40:65	byte	6845 CRT mode control register value (port 3x8h)
    12                              <1> ;				EGA/VGA values emulate those of the MDA/CGA
    13                              <1> ;40:66	byte	CGA current color palette mask setting (port 3d9h)
    14                              <1> ;				EGA and VGA values emulate the CGA
    15                              <1> INT10:  ;Video
    16 00006755 80FC00              <1> 	CMP AH, 0X00		;SET VIDEO MODE		
    17 00006758 7503E98E01          <1> 	JZ INT10_AH_00	
    18 0000675D 80FC02              <1> 	CMP AH, 0X02 		;SET CURSOR POSITION
    19 00006760 7503E99A02          <1> 	JZ INT10_AH_02	
    20 00006765 80FC05              <1> 	CMP AH, 0X05 		;SELECT ACTIVE DISPLAY PAGE  
    21 00006768 7503E9AA02          <1> 	JZ INT10_AH_05	
    22 0000676D 80FC09              <1> 	CMP AH, 0X09 		;WRITE CHARACTER AND ATTRIBUTE AT CURSOR POSITION
    23 00006770 7503E9AF02          <1> 	JZ INT10_AH_09	
    24 00006775 80FC0B              <1> 	CMP AH, 0X0B 		;SET PALETTE CGA
    25 00006778 7503E9DC02          <1> 	JZ INT10_AH_0B		;
    26 0000677D 80FC0E              <1> 	CMP AH, 0x0E        ;TELETYPE
    27 00006780 7429                <1> 	JZ .TELETYPE       
    28 00006782 80FC0F              <1> 	CMP AH, 0X0F 		;GET CURRENT VIDEO MODE
    29 00006785 7503E9E202          <1> 	JZ INT10_AH_0F		;	
    30                              <1> 
    31 0000678A CF                  <1> 	IRET			;END
    32                              <1> 	;DEBUGING	
    33 0000678B 50                  <1> 	PUSH AX
    34 0000678C B40E                <1> 	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
    35 0000678E B00D                <1> 	MOV AL, 0X0D	;SET AL TO CHAR	
    36 00006790 CD10                <1> 	INT 0X10		;CALL INTERRUPT 0X10
    37 00006792 B00A                <1> 	MOV AL, 0X0A	;SET AL TO CHAR	
    38 00006794 CD10                <1> 	INT 0X10		;CALL INTERRUPT 0X10
    39 00006796 B049                <1> 	MOV AL, 'I'		;SET AL TO CHAR	
    40 00006798 CD10                <1> 	INT 0X10		;CALL INTERRUPT 0X10
    41 0000679A B031                <1> 	MOV AL, '1'		;SET AL TO CHAR	
    42 0000679C CD10                <1> 	INT 0X10		;CALL INTERRUPT 0X10
    43 0000679E B030                <1> 	MOV AL, '0'		;SET AL TO CHAR
    44 000067A0 CD10                <1> 	INT 0X10		;CALL INTERRUPT 0X10
    45 000067A2 B020                <1> 	MOV AL, ' '		;SET AL TO CHAR
    46 000067A4 CD10                <1> 	INT 0X10		;CALL INTERRUPT 0X10
    47 000067A6 58                  <1> 	POP AX
    48 000067A7 E8C50B              <1> 	CALL DUMP_REGISTERS	
    49                              <1> 	;HLT
    50 000067AA CF                  <1> 	IRET			;END
    51                              <1> 	
    52                              <1> 		
    53                              <1>    .TELETYPE: 	;0X0450
    54 000067AB 50                  <1>  	PUSH AX
    55 000067AC 53                  <1> 	PUSH BX
    56 000067AD 51                  <1> 	PUSH CX
    57 000067AE 52                  <1> 	PUSH DX
    58 000067AF 57                  <1> 	PUSH DI
    59 000067B0 56                  <1> 	PUSH SI
    60 000067B1 1E                  <1> 	PUSH DS
    61 000067B2 06                  <1> 	PUSH ES
    62 000067B3 50                  <1> 	PUSH AX
    63 000067B4 B84000              <1> 	MOV AX, 0X0040
    64 000067B7 8ED8                <1> 	MOV DS, AX					;Set data segment
    65 000067B9 B400                <1> 	MOV AH, 0X00				;ah=0
    66 000067BB A05100              <1> 	MOV AL, BYTE [0X51]			;Current Row
    67 000067BE 8B0E4A00            <1> 	MOV CX, WORD [0x04A] 		;number of cols per row
    68 000067C2 01C9                <1> 	ADD CX, CX					;Double col for hidden char data
    69 000067C4 F6E1                <1> 	MUL CL						;mul Current row * cols
    70 000067C6 B700                <1> 	MOV BH, 0X00				;BH=0
    71 000067C8 8A1E5000            <1> 	MOV BL, BYTE [0X50]			;Set current col
    72 000067CC 01DB                <1> 	ADD BX, BX					;Double col for hidden char data
    73 000067CE 01C3                <1> 	ADD BX, AX					;Add in row
    74 000067D0 B800B8              <1> 	MOV AX, 0XB800				;
    75 000067D3 8ED8                <1> 	MOV DS, AX					;Set video segment
    76 000067D5 58                  <1> 	POP AX						;restore char	
    77 000067D6 3C0D                <1> 	CMP AL, 0X0D				;Check for enter
    78 000067D8 7503E99200          <1> 	JZ .ENTER					;return carrage
    79 000067DD 3C0A                <1> 	CMP AL, 0X0A				;Check for line feed
    80 000067DF 7503E99900          <1> 	JZ .LINE_FEED				;line feed
    81 000067E4 3C08                <1> 	CMP AL, 0X08				;check for back space
    82 000067E6 7503E9A700          <1> 	JZ .BACKSPACE
    83 000067EB 8807                <1> 	MOV [BX], AL				;Char out
    84 000067ED EB00                <1> 	JMP .MOVE_CURSOR_FORWARD
    85                              <1> 
    86                              <1>  .MOVE_CURSOR_FORWARD:
    87 000067EF B84000              <1> 	MOV AX, 0X0040				;Check col
    88 000067F2 8ED8                <1> 	MOV DS, AX					;Set data segment	
    89 000067F4 BB5000              <1> 	MOV BX, 0X0050				;Col
    90 000067F7 B400                <1> 	MOV AH, 0X00				;AH=0
    91 000067F9 8A07                <1> 	MOV AL, BYTE [BX]			;get current col
    92 000067FB FEC0                <1> 	INC AL						;inc col
    93 000067FD 3B064A00            <1> 	CMP AX, WORD [0x04A] 		;number of cols per row
    94 00006801 7265                <1> 	JB .NOT_END_OF_COL
    95                              <1>   .END_OF_COL:	
    96 00006803 B84000              <1>   	MOV AX, 0X0040				;Check col
    97 00006806 8ED8                <1> 	MOV DS, AX					;Set data segment	
    98 00006808 BB5000              <1>   	MOV BX, 0X0050				;
    99 0000680B B000                <1> 	MOV AL, 0X00				;
   100 0000680D 8807                <1> 	MOV BYTE [BX], AL			;Set col to 0
   101 0000680F BB5100              <1> 	MOV BX, 0X0051				;Row
   102 00006812 B400                <1> 	MOV AH, 0X00				;AH=0
   103 00006814 8A07                <1> 	MOV AL, BYTE [BX]			;get current ROW
   104 00006816 FEC0                <1> 	INC AL						;inc row
   105 00006818 83F819              <1> 	CMP AX, 0X19				;cmp to 25
   106 0000681B 7244                <1> 	JB .NOT_END_OF_ROWS
   107                              <1>   .SCROLL_UP:	
   108 0000681D FC                  <1> 	CLD							;SCROLL UP	
   109 0000681E B84000              <1> 	MOV AX, 0X0040
   110 00006821 8ED8                <1> 	MOV DS, AX
   111 00006823 803E490000          <1> 	CMP BYTE [0X49], 0X00		;IF MODE 0
   112 00006828 741F                <1> 	JZ .SCROLL_40
   113 0000682A 803E490001          <1> 	CMP BYTE [0X49], 0X01		;IF MODE 1
   114 0000682F 7418                <1> 	JZ .SCROLL_40				
   115                              <1> .SCROLL_80:						;MODE 2 AND 3			
   116 00006831 B800B8              <1> 	MOV AX, 0XB800
   117 00006834 8EC0                <1> 	MOV ES, AX
   118 00006836 BF0000              <1> 	MOV DI, 0X0000
   119 00006839 B800B8              <1> 	MOV AX, 0XB800
   120 0000683C 8ED8                <1> 	MOV DS, AX
   121 0000683E BEA000              <1> 	MOV SI, 0X00A0			;NEXT LINE
   122 00006841 B9A00F              <1> 	MOV CX, 4000			;TIMES
   123 00006844 F3A4                <1> 	REP MOVSB
   124 00006846 E99900              <1> 	JMP .END_INT10
   125                              <1> .SCROLL_40:					;MODE 0 AND 1
   126 00006849 B800B8              <1> 	MOV AX, 0XB800
   127 0000684C 8EC0                <1> 	MOV ES, AX
   128 0000684E BF0000              <1> 	MOV DI, 0X0000
   129 00006851 B800B8              <1> 	MOV AX, 0XB800
   130 00006854 8ED8                <1> 	MOV DS, AX
   131 00006856 BE5000              <1> 	MOV SI, 0X0050			;NEXT LINE
   132 00006859 B9D007              <1> 	MOV CX, 2000			;TIMES
   133 0000685C F3A4                <1> 	REP MOVSB	
   134 0000685E E98100              <1> 	JMP .END_INT10
   135                              <1> 	
   136                              <1>  .NOT_END_OF_ROWS:
   137 00006861 BB5100              <1> 	MOV BX, 0X0051				;ROW
   138 00006864 8807                <1> 	MOV BYTE [BX], AL			;STORE AL=ROW
   139 00006866 EB7A                <1> 	JMP .END_INT10				;END
   140                              <1> 
   141                              <1> .NOT_END_OF_COL:
   142 00006868 BB5000              <1> 	MOV BX, 0X0050				;Col
   143 0000686B 8807                <1> 	MOV BYTE [BX], AL			;STORE AL=COL
   144 0000686D EB73                <1> 	JMP .END_INT10				;END	
   145                              <1> 
   146                              <1>   .ENTER:
   147 0000686F B84000              <1>   	MOV AX, 0X0040				;Check col
   148 00006872 8ED8                <1> 	MOV DS, AX					;Set data segment	
   149 00006874 BB5000              <1>   	MOV BX, 0X0050				;
   150 00006877 B000                <1> 	MOV AL, 0X00				;
   151 00006879 8807                <1> 	MOV BYTE [BX], AL			;Set col to 0
   152 0000687B EB65                <1> 	JMP .END_INT10	
   153                              <1> 	
   154                              <1>   .LINE_FEED:
   155 0000687D B84000              <1>   	MOV AX, 0X0040				;Check col
   156 00006880 8ED8                <1> 	MOV DS, AX					;Set data segment	
   157 00006882 BB5100              <1> 	MOV BX, 0X0051				;Row
   158 00006885 B400                <1> 	MOV AH, 0X00				;AH=0
   159 00006887 8A07                <1> 	MOV AL, BYTE [BX]			;get current ROW
   160 00006889 FEC0                <1> 	INC AL						;inc row
   161 0000688B 83F819              <1> 	CMP AX, 0X19				;cmp to 25
   162 0000688E 72D1                <1> 	JB .NOT_END_OF_ROWS			;STORE AL IN ROW AND END
   163 00006890 EB8B                <1> 	JMP .SCROLL_UP				;SCROLL UP
   164                              <1> 	
   165                              <1>   .BACKSPACE:	
   166 00006892 83EB02              <1>     SUB BX, 0X0002				;GO BACK A SPACE IN RAM
   167 00006895 C60700              <1>     MOV BYTE [BX], 0X00			;Clear char
   168 00006898 B84000              <1>  	MOV AX, 0X0040				;Check col
   169 0000689B 8ED8                <1> 	MOV DS, AX					;Set data segment	
   170 0000689D BB5000              <1> 	MOV BX, 0X0050				;Col
   171 000068A0 B400                <1> 	MOV AH, 0X00				;AH=0
   172 000068A2 8A07                <1> 	MOV AL, BYTE [BX]			;get current col
   173 000068A4 FEC8                <1> 	DEC AL						;
   174 000068A6 3B064A00            <1> 	CMP AX, WORD [0x04A] 		;number of cols per row
   175 000068AA 722F                <1> 	JB .NOT_BEGIN_OF_COL
   176                              <1>   .BEGIN_OF_COL:	
   177 000068AC B84000              <1>   	MOV AX, 0X0040				;Check col
   178 000068AF 8ED8                <1> 	MOV DS, AX					;Set data segment	
   179 000068B1 BB5000              <1>   	MOV BX, 0X0050				;
   180 000068B4 B04F                <1> 	MOV AL, 0X4F				;
   181 000068B6 8807                <1> 	MOV BYTE [BX], AL			;Set col to 49
   182 000068B8 BB5100              <1> 	MOV BX, 0X0051				;Row
   183 000068BB B400                <1> 	MOV AH, 0X00				;AH=0
   184 000068BD 8A07                <1> 	MOV AL, BYTE [BX]			;get current ROW
   185 000068BF FEC8                <1> 	DEC AL						;dec row
   186 000068C1 83F819              <1> 	CMP AX, 0X19				;cmp to 25
   187 000068C4 729B                <1> 	JB .NOT_END_OF_ROWS
   188                              <1>   .BEGIN_OF_ROW:	
   189 000068C6 BB5000              <1>   	MOV BX, 0X0050				;col
   190 000068C9 C60700              <1> 	MOV BYTE [BX], 0X00
   191 000068CC BB5100              <1> 	MOV BX, 0X0051				;ROW
   192 000068CF C60700              <1> 	MOV BYTE [BX], 0X00
   193 000068D2 EB0E                <1> 	JMP .END_INT10
   194                              <1> 	
   195                              <1>  .NOT_BEGIN_OF_ROW:
   196 000068D4 BB5100              <1> 	MOV BX, 0X0051				;ROW
   197 000068D7 8807                <1> 	MOV BYTE [BX], AL
   198 000068D9 EB07                <1> 	JMP .END_INT10
   199                              <1> 
   200                              <1> .NOT_BEGIN_OF_COL:
   201 000068DB BB5000              <1> 	MOV BX, 0X0050				;Col
   202 000068DE 8807                <1> 	MOV BYTE [BX], AL
   203 000068E0 EB00                <1> 	JMP .END_INT10 
   204                              <1>   
   205                              <1>    .END_INT10:
   206 000068E2 07                  <1>     POP ES
   207 000068E3 1F                  <1> 	POP DS
   208 000068E4 5E                  <1> 	POP SI
   209 000068E5 5F                  <1> 	POP DI
   210 000068E6 5A                  <1> 	POP DX
   211 000068E7 59                  <1> 	POP CX
   212 000068E8 5B                  <1> 	POP BX
   213 000068E9 58                  <1> 	POP AX
   214                              <1> 	;STI
   215 000068EA CF                  <1> 	IRET
   216                              <1> 	
   217                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   218                              <1> ;SET VIDEO MODE
   219                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   220                              <1> INT10_AH_00:				
   221 000068EB 1E                  <1> 	PUSH DS					;STORE DS
   222 000068EC 53                  <1> 	PUSH BX					;STORE BX
   223 000068ED 51                  <1> 	PUSH CX					;STORE CX
   224 000068EE 50                  <1> 	PUSH AX					;STORE AX
   225 000068EF 50                  <1> 	PUSH AX					;STORE AX
   226                              <1> 	
   227 000068F0 B84000              <1> 	MOV AX, 0x0040			;BIOS DATA AREA 0X400
   228 000068F3 8ED8                <1> 	MOV DS, AX				;SET DS TO BIOS DATA AREA
   229 000068F5 58                  <1> 	POP AX					;RESTORE AX
   230                              <1> 	;;;;;;;;;;;;;;;;;;;;;;;;;;;
   231 000068F6 2407                <1> 	AND AL, 0X07			;JUST FOR NOW LIMITED MODES AVAILABLE 
   232                              <1> 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   233 000068F8 A24900              <1> 	MOV [0X49], AL			;40:49 SET VIDEO MODE
   234 000068FB 3C00                <1> 	CMP AL, 0X00			;IF MODE 0
   235 000068FD 7410                <1> 	JZ .CLEAR_SCREEN_MODE0	;CLEARS SCREEN
   236 000068FF 3C01                <1> 	CMP AL, 0X01			;IF MODE 1
   237 00006901 740C                <1> 	JZ .CLEAR_SCREEN_MODE0	;CLEARS SCREEN
   238 00006903 3C02                <1> 	CMP AL, 0X02			;IF MODE 2
   239 00006905 7418                <1> 	JZ .SET_MODE2
   240                              <1> 
   241 00006907 3C03                <1> 	CMP AL, 0X03			;IF MODE 3
   242 00006909 740C                <1> 	JZ .CLEAR_SCREEN_MODE2	;CLEARS SCREEN
   243 0000690B 3C04                <1> 	CMP AL, 0X04			;IF MODE 4
   244 0000690D 7457                <1> 	JZ .SET_MODE4
   245                              <1> 
   246                              <1> 	
   247                              <1>  .CLEAR_SCREEN_MODE0:	
   248 0000690F C7064A002800        <1> 	MOV WORD [0X004A], 0X0028	;SET COL COUNT 40
   249 00006915 EB38                <1> 	JMP .CLEAR_SCREEN_TEXT_MODE
   250                              <1>  .CLEAR_SCREEN_MODE2:
   251 00006917 C7064A005000        <1> 	MOV WORD [0X004A], 0X0050	;SET COL COUNT 80
   252 0000691D EB30                <1> 	JMP .CLEAR_SCREEN_TEXT_MODE
   253                              <1> 	
   254                              <1>  .SET_MODE2:
   255 0000691F C7064A005000        <1> 	MOV WORD [0X004A], 0X0050	;SET COL COUNT 80
   256                              <1> 	
   257 00006925 8CC8                <1> 	MOV AX, CS
   258 00006927 8ED8                <1> 	MOV DS, AX
   259                              <1> 
   260 00006929 B400                <1> 	MOV AH, 0X00
   261 0000692B B91000              <1> 	MOV CX, 0X0010
   262 0000692E BB[C269]            <1> 	MOV BX, .CGA_TEXT_80X25
   263                              <1> 
   264 00006931 B000                <1> 	MOV AL, 0X00
   265 00006933 BAD803              <1> 	MOV DX, 0X03D8
   266 00006936 EE                  <1> 	OUT DX, AL
   267                              <1> 
   268                              <1>   .CRT_LOOP_MODE2:
   269 00006937 8A07                <1> 	MOV AL, [BX]
   270 00006939 E8B600              <1> 	CALL .WRITE_CGA_REG
   271 0000693C FEC4                <1> 	INC AH
   272 0000693E 43                  <1> 	INC BX
   273 0000693F E2F6                <1> 	LOOP .CRT_LOOP_MODE2
   274                              <1> 
   275 00006941 B02D                <1> 	MOV AL, 0X2D
   276 00006943 BAD803              <1> 	MOV DX, 0X03D8			;MODE CONTROL REG
   277 00006946 EE                  <1> 	OUT DX, AL
   278                              <1> 	
   279 00006947 B030                <1> 	MOV AL, 0X30
   280 00006949 BAD903              <1> 	MOV DX, 0X03D9			;COLOR SELECT REG
   281 0000694C EE                  <1> 	OUT DX, AL	
   282                              <1> 	
   283 0000694D EB00                <1> 	JMP .CLEAR_SCREEN_TEXT_MODE
   284                              <1> 
   285                              <1>  .CLEAR_SCREEN_TEXT_MODE:
   286 0000694F B800B8              <1> 	MOV AX, 0XB800				;VIDEO MEM
   287 00006952 8ED8                <1> 	MOV DS, AX					;SET DS
   288 00006954 BB0000              <1> 	MOV BX, 0X0000				;BX = 0
   289 00006957 B92008              <1> 	MOV CX, 2080 				;TIMES TO LOOP, YES NOT HEX
   290 0000695A B80007              <1> 	MOV AX, 0X0700				;0 B/W
   291                              <1>   .LOOP_CLS_MODE0:				;LOOP TO CLEAR SCREEN
   292 0000695D 8907                <1> 	MOV WORD [BX], AX			;WORD [BX] = AX
   293 0000695F 83C302              <1> 	ADD BX, 0X0002				;INC BX X2
   294 00006962 E2F9                <1> 	LOOP .LOOP_CLS_MODE0		;LOOP TIL DONE	
   295 00006964 EB47                <1> 	JMP .END					;END
   296                              <1> 
   297                              <1> .SET_MODE4:
   298 00006966 C7064A002800        <1> 	MOV WORD [0X004A], 0X0028	;SET COL COUNT 40
   299                              <1> 	
   300 0000696C 8CC8                <1> 	MOV AX, CS
   301 0000696E 8ED8                <1> 	MOV DS, AX
   302                              <1> 
   303 00006970 B400                <1> 	MOV AH, 0X00
   304 00006972 B91000              <1> 	MOV CX, 0X0010
   305 00006975 BB[D269]            <1> 	MOV BX, .CGA_GRAPHICS
   306                              <1> 
   307 00006978 B000                <1> 	MOV AL, 0X00
   308 0000697A BAD803              <1> 	MOV DX, 0X03D8
   309 0000697D EE                  <1> 	OUT DX, AL
   310                              <1> 
   311                              <1>   .CRT_LOOP_MODE4:
   312 0000697E 8A07                <1> 	MOV AL, [BX]
   313 00006980 E86F00              <1> 	CALL .WRITE_CGA_REG
   314 00006983 FEC4                <1> 	INC AH
   315 00006985 43                  <1> 	INC BX
   316 00006986 E2F6                <1> 	LOOP .CRT_LOOP_MODE4
   317                              <1> 
   318 00006988 B02E                <1> 	MOV AL, 0X2E
   319 0000698A BAD803              <1> 	MOV DX, 0X03D8
   320 0000698D EE                  <1> 	OUT DX, AL
   321                              <1> 	
   322 0000698E B030                <1> 	MOV AL, 0X30
   323 00006990 BAD903              <1> 	MOV DX, 0X03D9			;COLOR SELECT REG
   324 00006993 EE                  <1> 	OUT DX, AL	
   325                              <1> 	
   326                              <1> 	
   327 00006994 EB00                <1> 	JMP .CLEAR_SCREEN_MODE4
   328                              <1> 	
   329                              <1>   .CLEAR_SCREEN_MODE4:
   330 00006996 B800B8              <1> 	MOV AX, 0XB800				;VIDEO MEM
   331 00006999 8ED8                <1> 	MOV DS, AX					;SET DS
   332 0000699B BB0000              <1> 	MOV BX, 0X0000				;BX = 0
   333 0000699E B90020              <1> 	MOV CX, 0X2000				;TIMES TO LOOP
   334 000069A1 B80000              <1> 	MOV AX, 0X0000				;CLEAR SCREEN TO NOTHING 
   335                              <1>   .LOOP_CLS_MODE4:				;LOOP TO CLEAR SCREEN
   336 000069A4 8907                <1> 	MOV WORD [BX], AX			;WORD [BX] = AX
   337 000069A6 83C302              <1> 	ADD BX, 0X0002				;INC BX X2
   338 000069A9 E2F9                <1> 	LOOP .LOOP_CLS_MODE4		;LOOP TIL DONE	
   339 000069AB EB00                <1> 	JMP .END					;END
   340                              <1> 
   341                              <1>   .END:
   342 000069AD 58                  <1>  	POP AX			;RESTORE AX
   343 000069AE 59                  <1>  	POP CX			;RESTORE CX
   344 000069AF 5B                  <1> 	POP BX			;RESTORE BX
   345 000069B0 1F                  <1> 	POP DS			;RESTORE DS
   346 000069B1 CF                  <1> 	IRET
   347                              <1> 
   348                              <1> 
   349                              <1> ; CGA TEXT 40x25 MODE
   350 000069B2 38282D0A1F06191C    <1> DB 0X38, 0X28, 0X2D, 0X0A, 0X1F, 0X06, 0X19, 0X1C
   351 000069BA 0207060700000000    <1> DB 0X02, 0X07, 0X06, 0X07, 0X00, 0X00, 0X00, 0X00
   352                              <1> 
   353                              <1> ; CGA TEXT 80x25 MODE
   354                              <1> .CGA_TEXT_80X25:
   355 000069C2 71505A0A1F06191C    <1> DB 0X71, 0X50, 0X5A, 0X0A, 0X1F, 0X06, 0X19, 0X1C
   356 000069CA 0207060700000000    <1> DB 0X02, 0X07, 0X06, 0X07, 0X00, 0X00, 0X00, 0X00
   357                              <1> 
   358                              <1> ; CGA GRAPHICS MODE
   359                              <1> .CGA_GRAPHICS:
   360 000069D2 38282D0A7F066470    <1> DB 0X38, 0X28, 0X2D, 0X0A, 0X7F, 0X06, 0X64, 0X70
   361 000069DA 0201060700000000    <1> DB 0X02, 0X01, 0X06, 0X07, 0X00, 0X00, 0X00, 0X00
   362                              <1> 
   363                              <1> ; MDA TEXT 80x25 MODE
   364 000069E2 6150520F19061919    <1> DB 0X61, 0X50, 0X52, 0X0F, 0X19, 0X06, 0X19, 0X19
   365 000069EA 020D0B0C00000000    <1> DB 0X02, 0X0D, 0X0B, 0X0C, 0X00, 0X00, 0X00, 0X00
   366                              <1> 
   367                              <1> 
   368                              <1> 
   369                              <1> .WRITE_CGA_REG:
   370 000069F2 52                  <1> 	PUSH DX	
   371 000069F3 BAD403              <1> 	MOV DX, 0X03D4	; DX = CRTC INDEX PORT
   372 000069F6 50                  <1> 	PUSH AX
   373 000069F7 88E0                <1> 	MOV AL, AH 		; AH = BYTE, AL = REGISTER NUMBER
   374 000069F9 EE                  <1> 	OUT DX, AL		; write register number
   375 000069FA 42                  <1> 	INC DX			; DX = CRTC data port
   376 000069FB 58                  <1> 	POP AX
   377 000069FC EE                  <1> 	OUT DX, AL		; WRITE BYTE
   378 000069FD 5A                  <1> 	POP DX
   379 000069FE C3                  <1> 	RET
   380                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   381                              <1> ;SET CURSOR POSITION
   382                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   383                              <1> INT10_AH_02:
   384 000069FF 1E                  <1> 	PUSH DS			;STORE DS
   385 00006A00 53                  <1> 	PUSH BX			;STORE BX
   386 00006A01 50                  <1> 	PUSH AX			;STORE AX
   387                              <1> 	
   388 00006A02 B84500              <1> 	MOV AX, 0X0045	;BIOS DATA 0X450 CURSOR POSITION BASE PAGE 0
   389 00006A05 8ED8                <1> 	MOV DS, AX		;SET DS TO 0X450
   390 00006A07 B80200              <1> 	MOV AX, 0X02	;TIMES (BH * 2) TO GET THE PAGE OFFSET FROM 0X450
   391 00006A0A F6E7                <1> 	MUL BH			;AL = PAGE OFFSET
   392 00006A0C 89C3                <1> 	MOV BX, AX		;BX = AX
   393 00006A0E 8817                <1> 	MOV [BX], DL	;STORE COLUMN
   394 00006A10 43                  <1> 	INC BX			;INC BX
   395 00006A11 8837                <1> 	MOV [BX], DH	;STORE ROW	
   396                              <1> 
   397 00006A13 58                  <1> 	POP AX			;RESTORE AX
   398 00006A14 5B                  <1> 	POP BX			;RESTORE BX
   399 00006A15 1F                  <1> 	POP DS			;RESTORE DS
   400 00006A16 CF                  <1> 	IRET
   401                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   402                              <1> ;SELECT ACTIVE DISPLAY PAGE      
   403                              <1> ;"MAYBE WORKS" DONT KNOW IF IT WANTS A NUMBER 0-7 OR MEM ADDRESS OFFSET
   404                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   405                              <1> INT10_AH_05:
   406 00006A17 1E                  <1> 	PUSH DS			;STORE DS
   407 00006A18 50                  <1> 	PUSH AX			;STORE AX
   408 00006A19 B84000              <1> 	MOV AX, 0X0040	;BIOS DATA 0X44E ACTIVE DISPLAY PAGE 
   409 00006A1C 8ED8                <1> 	MOV DS, AX		;SET DS
   410 00006A1E 58                  <1> 	POP AX			;RESTORE AX
   411 00006A1F A24E00              <1> 	MOV [0X4E], AL	;SET PAGE NUMBER [0X0040:0X004E] = AL
   412 00006A22 1F                  <1> 	POP DS			;RESTORE DS
   413 00006A23 CF                  <1> 	IRET
   414                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   415                              <1> ;WRITE CHARACTER AND ATTRIBUTE AT CURSOR POSITION
   416                              <1> ;AL = ASCII character to write
   417                              <1> ;BH = display page  (or mode 13h, background pixel value)		IGNORED
   418                              <1> ;BL = character attribute (text) foreground color (graphics) 
   419                              <1> ;CX = count of characters to write (CX >= 1)					IGNORED
   420                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   421                              <1> INT10_AH_09:	
   422 00006A24 1E                  <1> 	PUSH DS			;STORE DS
   423 00006A25 52                  <1> 	PUSH DX			;STORE DX
   424 00006A26 51                  <1> 	PUSH CX			;STORE CX
   425 00006A27 53                  <1> 	PUSH BX			;STORE BX
   426 00006A28 50                  <1> 	PUSH AX			;STORE AX
   427 00006A29 53                  <1> 	PUSH BX			;STORE BX
   428 00006A2A 50                  <1> 	PUSH AX			;STORE AX
   429                              <1> 		
   430 00006A2B B84000              <1> 	MOV AX, 0X0040
   431 00006A2E 8ED8                <1> 	MOV DS, AX					;Set data segment
   432 00006A30 B400                <1> 	MOV AH, 0X00				;ah=0
   433 00006A32 A05100              <1> 	MOV AL, BYTE [0X51]			;Current Row
   434 00006A35 8B0E4A00            <1> 	MOV CX, WORD [0x04A] 		;number of cols per row
   435 00006A39 01C9                <1> 	ADD CX, CX					;Double col for hidden char data
   436 00006A3B F6E1                <1> 	MUL CL						;mul Current row * cols
   437 00006A3D B700                <1> 	MOV BH, 0X00				;BH=0
   438 00006A3F 8A1E5000            <1> 	MOV BL, BYTE [0X50]			;Set current col
   439 00006A43 01DB                <1> 	ADD BX, BX					;Double col for hidden char data
   440 00006A45 01C3                <1> 	ADD BX, AX					;Add in row
   441 00006A47 B800B8              <1> 	MOV AX, 0XB800				;
   442 00006A4A 8ED8                <1> 	MOV DS, AX					;Set video segment
   443 00006A4C 58                  <1> 	POP AX						;RESTORE AX
   444 00006A4D 5A                  <1> 	POP DX						;RESTORE BX
   445 00006A4E 88D4                <1> 	MOV AH, DL					;GET ATTRIBUTES	
   446 00006A50 8907                <1> 	MOV [BX], AX				
   447                              <1> 	
   448 00006A52 58                  <1> 	POP AX			;RESTORE AX
   449 00006A53 5B                  <1> 	POP BX			;RESTORE BX
   450 00006A54 59                  <1> 	POP CX			;RESTORE CX
   451 00006A55 5A                  <1> 	POP DX			;RESTORE DX
   452 00006A56 1F                  <1> 	POP DS			;RESTORE DS
   453 00006A57 CF                  <1> 	IRET
   454                              <1> 	
   455                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   456                              <1> ;WRITE CHARACTER AT CURSOR POSITION 
   457                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   458                              <1> INT10_AH_0A:
   459 00006A58 CF                  <1> 	IRET
   460                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   461                              <1> ;SET PALETTE 
   462                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   463                              <1> INT10_AH_0B:		;
   464 00006A59 1E                  <1> 	PUSH DS			;STORE DS
   465 00006A5A 50                  <1> 	PUSH AX			;STORE AX
   466 00006A5B 80FF00              <1> 	CMP BH, 0X00 	;= 0	to set background and border color
   467                              <1> 					;= 1	to select 4 color palette
   468 00006A5E 7409                <1> 	JZ .END			;ONLY HANDLE BH = 1 FOR NOW
   469 00006A60 B84000              <1> 	MOV AX, 0x0040	;BIOS DATA AREA 0X400
   470 00006A63 8ED8                <1> 	MOV DS, AX		;SET DS TO BIOS DATA AREA
   471 00006A65 881E6600            <1> 	MOV [0X66], BL	;40:66 color palette
   472                              <1> 	
   473                              <1>   .END:				;END OF INT10_AH_0B
   474 00006A69 58                  <1> 	POP AX			;RESTORE AX
   475 00006A6A 1F                  <1> 	POP DS			;RESTORE DS
   476 00006A6B CF                  <1> 	IRET
   477                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   478                              <1> ;GET VIDEO MODE
   479                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480                              <1> INT10_AH_0F:
   481 00006A6C 1E                  <1> 	PUSH DS			;STORE DS
   482 00006A6D B84000              <1> 	MOV AX, 0x0040	;BIOS DATA AREA 0X400
   483 00006A70 8ED8                <1> 	MOV DS, AX		;SET DS TO BIOS DATA AREA
   484 00006A72 8A264A00            <1> 	MOV AH, [0X4A]  ;NUMBER OF SCREEN COLUMNS
   485 00006A76 A04900              <1> 	MOV AL, [0X49]	;CURRENT MODE
   486 00006A79 8A3E4E00            <1> 	MOV BH, [0X4E]	;CURRENT PAGE
   487 00006A7D 1F                  <1> 	POP DS			;RESTORE DS
   488 00006A7E CF                  <1> 	IRET
   489                              <1> 
   490                              <1> ;----------------------------------------
   491                              <1> ; CHARACTER GENERATOR GRAPHICS FOR 320X200 AND 640X200 GRAPHICS
   492                              <1> ;----------------------------------------
   493                              <1> 
   494 00006A7F 0000000000000000    <1> 	DB	000H,000H,000H,000H,000H,000H,000H,000H ; D_00
   495 00006A87 7E81A581BD99817E    <1> 	DB	07EH,081H,0A5H,081H,0BDH,099H,081H,07EH ; D_01
   496 00006A8F 7EFFDBFFC3E7FF7E    <1> 	DB	07EH,0FFH,0DBH,0FFH,0C3H,0E7H,0FFH,07EH ; D_02
   497 00006A97 6CFEFEFE7C381000    <1> 	DB	06CH,0FEH,0FEH,0FEH,07CH,038H,010H,000H ; D_03
   498 00006A9F 10387CFE7C381008    <1> 	DB	010H,038H,07CH,0FEH,07CH,038H,010H,008H ; D_04
   499 00006AA7 387C38FEFE7C387C    <1> 	DB	038H,07CH,038H,0FEH,0FEH,07CH,038H,07CH ; D_05
   500 00006AAF 1010387CFE7C387C    <1> 	DB	010H,010H,038H,07CH,0FEH,07CH,038H,07CH ; D_06
   501 00006AB7 0000183C3C180000    <1> 	DB	000H,000H,018H,03CH,03CH,018H,000H,000H ; D_07
   502 00006ABF FFFFE7C3C3E7FFFF    <1> 	DB	0FFH,0FFH,0E7H,0C3H,0C3H,0E7H,0FFH,0FFH ; D_08
   503 00006AC7 003C664242663C00    <1> 	DB	000H,03CH,066H,042H,042H,066H,03CH,000H ; D_09
   504 00006ACF FFC399BDBD99C3FF    <1> 	DB	0FFH,0C3H,099H,0BDH,0BDH,099H,0C3H,0FFH ; D_0A
   505 00006AD7 0F070F7DCCCCCC78    <1> 	DB	00FH,007H,00FH,07DH,0CCH,0CCH,0CCH,078H ; D_08
   506 00006ADF 3C6666663C187E18    <1> 	DB	03CH,066H,066H,066H,03CH,018H,07EH,018H ; D_0C
   507 00006AE7 3F333F303070F0E0    <1> 	DB	03FH,033H,03FH,030H,030H,070H,0F0H,0E0H ; D_0D
   508 00006AEF 7F637F636367E6C0    <1> 	DB	07FH,063H,07FH,063H,063H,067H,0E6H,0C0H ; D_0E
   509 00006AF7 995A3CE7E73C5A99    <1> 	DB	099H,05AH,03CH,0E7H,0E7H,03CH,05AH,099H ; D_0F
   510                              <1> 
   511 00006AFF 80E0F8FEF8E08000    <1> 	DB	080H,0E0H,0F8H,0FEH,0F8H,0E0H,080H,000H ; D_10
   512 00006B07 020E3EFE3E0E0200    <1> 	DB	002H,00EH,03EH,0FEH,03EH,00EH,002H,000H ; D_11
   513 00006B0F 183C7E18187E3C18    <1> 	DB	018H,03CH,07EH,018H,018H,07EH,03CH,018H ; D_12
   514 00006B17 6666666666006600    <1> 	DB	066H,066H,066H,066H,066H,000H,066H,000H ; D_13
   515 00006B1F 7FDBDB7B1B1B1B00    <1> 	DB	07FH,0DBH,0DBH,07BH,01BH,01BH,01BH,000H ; D_14
   516 00006B27 3E63386C6C38CC78    <1> 	DB	03EH,063H,038H,06CH,06CH,038H,0CCH,078H ; D_15
   517 00006B2F 000000007E7E7E00    <1> 	DB	000H,000H,000H,000H,07EH,07EH,07EH,000H ; D_16
   518 00006B37 183C7E187E3C18FF    <1> 	DB	018H,03CH,07EH,018H,07EH,03CH,018H,0FFH ; D_17
   519 00006B3F 183C7E1818181800    <1> 	DB	018H,03CH,07EH,018H,018H,018H,018H,000H ; D_18
   520 00006B47 181818187E3C1800    <1> 	DB	018H,018H,018H,018H,07EH,03CH,018H,000H ; D_19
   521 00006B4F 00180CFE0C180000    <1> 	DB	000H,018H,00CH,0FEH,00CH,018H,000H,000H ; D_1A
   522 00006B57 003060FE60300000    <1> 	DB	000H,030H,060H,0FEH,060H,030H,000H,000H ; D_1B
   523 00006B5F 0000C0C0C0FE0000    <1> 	DB	000H,000H,0C0H,0C0H,0C0H,0FEH,000H,000H ; D_1C
   524 00006B67 002466FF66240000    <1> 	DB	000H,024H,066H,0FFH,066H,024H,000H,000H ; D_1D
   525 00006B6F 00183C7EFFFF0000    <1> 	DB	000H,018H,03CH,07EH,0FFH,0FFH,000H,000H ; D_1E
   526 00006B77 00FFFF7E3C180000    <1> 	DB	000H,0FFH,0FFH,07EH,03CH,018H,000H,000H ; D_1F
   527                              <1> 
   528 00006B7F 0000000000000000    <1> 	DB	000H,000H,000H,000H,000H,000H,000H,000H ; SP D_20
   529 00006B87 3078783030003000    <1> 	DB	030H,078H,078H,030H,030H,000H,030H,000H ; ! D_21
   530 00006B8F 6C6C6C0000000000    <1> 	DB	06CH,06CH,06CH,000H,000H,000H,000H,000H ; " D_22
   531 00006B97 6C6CFE6CFE6C6C00    <1> 	DB	06CH,06CH,0FEH,06CH,0FEH,06CH,06CH,000H ; # D_23
   532 00006B9F 307CC0780CF83000    <1> 	DB	030H,07CH,0C0H,078H,00CH,0F8H,030H,000H ; $ D_24
   533 00006BA7 00C6CC183066C600    <1> 	DB	000H,0C6H,0CCH,018H,030H,066H,0C6H,000H ; PER CENT D_25
   534 00006BAF 386C3876DCCC7600    <1> 	DB	038H,06CH,038H,076H,0DCH,0CCH,076H,000H ; & D_26
   535 00006BB7 6060C00000000000    <1> 	DB	060H,060H,0C0H,000H,000H,000H,000H,000H ; ' D_27
   536 00006BBF 1830606060301800    <1> 	DB	018H,030H,060H,060H,060H,030H,018H,000H ; ( D_28
   537 00006BC7 6030181818306000    <1> 	DB	060H,030H,018H,018H,018H,030H,060H,000H ; ) D_29
   538 00006BCF 00663CFF3C660000    <1> 	DB	000H,066H,03CH,0FFH,03CH,066H,000H,000H ; * D_2A
   539 00006BD7 003030FC30300000    <1> 	DB	000H,030H,030H,0FCH,030H,030H,000H,000H ; + D_2B
   540 00006BDF 0000000000303060    <1> 	DB	000H,000H,000H,000H,000H,030H,030H,060H ; , D_2C
   541 00006BE7 000000FC00000000    <1> 	DB	000H,000H,000H,0FCH,000H,000H,000H,000H ; - D_2D
   542 00006BEF 0000000000303000    <1> 	DB	000H,000H,000H,000H,000H,030H,030H,000H ; . D_2E
   543 00006BF7 060C183060C08000    <1> 	DB	006H,00CH,018H,030H,060H,0C0H,080H,000H ; / D_2F
   544                              <1> 
   545 00006BFF 7CC6CEDEF6E67C00    <1> 	DB	07CH,0C6H,0CEH,0DEH,0F6H,0E6H,07CH,000H ; 0 D_30
   546 00006C07 307030303030FC00    <1> 	DB	030H,070H,030H,030H,030H,030H,0FCH,000H ; 1 D_31
   547 00006C0F 78CC0C3860CCFC00    <1> 	DB	078H,0CCH,00CH,038H,060H,0CCH,0FCH,000H ; 2 D_32
   548 00006C17 78CC0C380CCC7800    <1> 	DB	078H,0CCH,00CH,038H,00CH,0CCH,078H,000H ; 3 D_33
   549 00006C1F 1C3C6CCCFE0C1E00    <1> 	DB	01CH,03CH,06CH,0CCH,0FEH,00CH,01EH,000H ; 4 D_34
   550 00006C27 FCC0F80C0CCC7800    <1> 	DB	0FCH,0C0H,0F8H,00CH,00CH,0CCH,078H,000H ; 5 D_35
   551 00006C2F 3860C0F8CCCC7800    <1> 	DB	038H,060H,0C0H,0F8H,0CCH,0CCH,078H,000H ; 6 D_36
   552 00006C37 FCCC0C1830303000    <1> 	DB	0FCH,0CCH,00CH,018H,030H,030H,030H,000H ; 7 D_37
   553 00006C3F 78CCCC78CCCC7800    <1> 	DB	078H,0CCH,0CCH,078H,0CCH,0CCH,078H,000H ; 8 D_38
   554 00006C47 78CCCC7C0C187000    <1> 	DB	078H,0CCH,0CCH,07CH,00CH,018H,070H,000H ; 9 D_39
   555 00006C4F 0030300000303000    <1> 	DB	000H,030H,030H,000H,000H,030H,030H,000H ; : D_3A
   556 00006C57 0030300000303060    <1> 	DB	000H,030H,030H,000H,000H,030H,030H,060H ; ; D_3B
   557 00006C5F 183060C060301800    <1> 	DB	018H,030H,060H,0C0H,060H,030H,018H,000H ; < D_3C
   558 00006C67 0000FC0000FC0000    <1> 	DB	000H,000H,0FCH,000H,000H,0FCH,000H,000H ; = D_3D
   559 00006C6F 6030180C18306000    <1> 	DB	060H,030H,018H,00CH,018H,030H,060H,000H ; > D_3E
   560 00006C77 78CC0C1830003000    <1> 	DB	078H,0CCH,00CH,018H,030H,000H,030H,000H ; ? D_3F
   561                              <1> 
   562 00006C7F 7CC6DEDEDEC07800    <1> 	DB	07CH,0C6H,0DEH,0DEH,0DEH,0C0H,078H,000H ; @ D_40
   563 00006C87 3078CCCCFCCCCC00    <1> 	DB	030H,078H,0CCH,0CCH,0FCH,0CCH,0CCH,000H ; A D_41
   564 00006C8F FC66667C6666FC00    <1> 	DB	0FCH,066H,066H,07CH,066H,066H,0FCH,000H ; B D_42
   565 00006C97 3C66C0C0C0663C00    <1> 	DB	03CH,066H,0C0H,0C0H,0C0H,066H,03CH,000H ; C D_43
   566 00006C9F F86C6666666CF800    <1> 	DB	0F8H,06CH,066H,066H,066H,06CH,0F8H,000H ; D D_44
   567 00006CA7 FE6268786862FE00    <1> 	DB	0FEH,062H,068H,078H,068H,062H,0FEH,000H ; E D_45
   568 00006CAF FE6268786860F000    <1> 	DB	0FEH,062H,068H,078H,068H,060H,0F0H,000H ; F D_46
   569 00006CB7 3C66C0C0CE663E00    <1> 	DB	03CH,066H,0C0H,0C0H,0CEH,066H,03EH,000H ; G D_47
   570 00006CBF CCCCCCFCCCCCCC00    <1> 	DB	0CCH,0CCH,0CCH,0FCH,0CCH,0CCH,0CCH,000H ; H D_48
   571 00006CC7 7830303030307800    <1> 	DB	078H,030H,030H,030H,030H,030H,078H,000H ; I D_49
   572 00006CCF 1E0C0C0CCCCC7800    <1> 	DB	01EH,00CH,00CH,00CH,0CCH,0CCH,078H,000H ; J D_4A
   573 00006CD7 E6666C786C66E600    <1> 	DB	0E6H,066H,06CH,078H,06CH,066H,0E6H,000H ; K D_4B
   574 00006CDF F06060606266FE00    <1> 	DB	0F0H,060H,060H,060H,062H,066H,0FEH,000H ; L D_4C
   575 00006CE7 C6EEFEFED6C6C600    <1> 	DB	0C6H,0EEH,0FEH,0FEH,0D6H,0C6H,0C6H,000H ; M D_4C
   576 00006CEF C6E6F6DECEC6C600    <1> 	DB	0C6H,0E6H,0F6H,0DEH,0CEH,0C6H,0C6H,000H ; N D_4E
   577 00006CF7 386CC6C6C66C3800    <1> 	DB	038H,06CH,0C6H,0C6H,0C6H,06CH,038H,000H ; O D_4F
   578                              <1> 
   579 00006CFF FC66667C6060F000    <1> 	DB	0FCH,066H,066H,07CH,060H,060H,0F0H,000H ; P D_50
   580 00006D07 78CCCCCCDC781C00    <1> 	DB	078H,0CCH,0CCH,0CCH,0DCH,078H,01CH,000H ; Q D_51
   581 00006D0F FC66667C6C66E600    <1> 	DB	0FCH,066H,066H,07CH,06CH,066H,0E6H,000H ; R D_52
   582 00006D17 78CCE0701CCC7800    <1> 	DB	078H,0CCH,0E0H,070H,01CH,0CCH,078H,000H ; S D_53
   583 00006D1F FCB4303030307800    <1> 	DB	0FCH,0B4H,030H,030H,030H,030H,078H,000H ; T D_54
   584 00006D27 CCCCCCCCCCCCFC00    <1> 	DB	0CCH,0CCH,0CCH,0CCH,0CCH,0CCH,0FCH,000H ; U D_55
   585 00006D2F CCCCCCCCCC783000    <1> 	DB	0CCH,0CCH,0CCH,0CCH,0CCH,078H,030H,000H ; V D_56
   586 00006D37 C6C6C6D6FEEEC600    <1> 	DB	0C6H,0C6H,0C6H,0D6H,0FEH,0EEH,0C6H,000H ; W D_57
   587 00006D3F C6C66C38386CC600    <1> 	DB	0C6H,0C6H,06CH,038H,038H,06CH,0C6H,000H ; X D_58
   588 00006D47 CCCCCC7830307800    <1> 	DB	0CCH,0CCH,0CCH,078H,030H,030H,078H,000H ; Y D_59
   589 00006D4F FEC68C183266FE00    <1> 	DB	0FEH,0C6H,08CH,018H,032H,066H,0FEH,000H ; Z D_5A
   590 00006D57 7860606060607800    <1> 	DB	078H,060H,060H,060H,060H,060H,078H,000H ; [ D_5B
   591 00006D5F C06030180C060200    <1> 	DB	0C0H,060H,030H,018H,00CH,006H,002H,000H ; BACKSLASH D_5C
   592 00006D67 7818181818187800    <1> 	DB	078H,018H,018H,018H,018H,018H,078H,000H ; ] D_5D
   593 00006D6F 10386CC600000000    <1> 	DB	010H,038H,06CH,0C6H,000H,000H,000H,000H ; CIRCUMFLEX D_5E
   594 00006D77 00000000000000FF    <1> 	DB	000H,000H,000H,000H,000H,000H,000H,0FFH ; _ D_5F
   595                              <1> 
   596 00006D7F 3030180000000000    <1> 	DB	030H,030H,018H,000H,000H,000H,000H,000H ;   D_60
   597 00006D87 0000780C7CCC7600    <1> 	DB	000H,000H,078H,00CH,07CH,0CCH,076H,000H ; LOWER CASE A D_61
   598 00006D8F E060607C6666DC00    <1> 	DB	0E0H,060H,060H,07CH,066H,066H,0DCH,000H ; L.C. B D_62
   599 00006D97 000078CCC0CC7800    <1> 	DB	000H,000H,078H,0CCH,0C0H,0CCH,078H,000H ; L.C. C D_63
   600 00006D9F 1C0C0C7CCCCC7600    <1> 	DB	01CH,00CH,00CH,07CH,0CCH,0CCH,076H,000H ; L.C. D D_64
   601 00006DA7 000078CCFCC07800    <1> 	DB	000H,000H,078H,0CCH,0FCH,0C0H,078H,000H ; L.C. E D_65
   602 00006DAF 386C60F06060F000    <1> 	DB	038H,06CH,060H,0F0H,060H,060H,0F0H,000H ; L.C. F D_66
   603 00006DB7 000076CCCC7C0CF8    <1> 	DB	000H,000H,076H,0CCH,0CCH,07CH,00CH,0F8H ; L.C. G D_67
   604 00006DBF E0606C766666E600    <1> 	DB	0E0H,060H,06CH,076H,066H,066H,0E6H,000H ; L.C. H D_68
   605 00006DC7 3000703030307800    <1> 	DB	030H,000H,070H,030H,030H,030H,078H,000H ; L.C. I D_69
   606 00006DCF 0C000C0C0CCCCC78    <1> 	DB	00CH,000H,00CH,00CH,00CH,0CCH,0CCH,078H ; L.C. J D_6A
   607 00006DD7 E060666C786CE600    <1> 	DB	0E0H,060H,066H,06CH,078H,06CH,0E6H,000H ; L.C. K D_6B
   608 00006DDF 7030303030307800    <1> 	DB	070H,030H,030H,030H,030H,030H,078H,000H ; L.C. L D_6C
   609 00006DE7 0000CCFEFED6C600    <1> 	DB	000H,000H,0CCH,0FEH,0FEH,0D6H,0C6H,000H ; L.C. M D_6D
   610 00006DEF 0000F8CCCCCCCC00    <1> 	DB	000H,000H,0F8H,0CCH,0CCH,0CCH,0CCH,000H ; L.C. N D_6E
   611 00006DF7 000078CCCCCC7800    <1> 	DB	000H,000H,078H,0CCH,0CCH,0CCH,078H,000H ; L.C. O D_6F
   612                              <1> 
   613 00006DFF 0000DC66667C60F0    <1> 	DB	000H,000H,0DCH,066H,066H,07CH,060H,0F0H ; L.C. P D_70
   614 00006E07 000076CCCC7C0C1E    <1> 	DB	000H,000H,076H,0CCH,0CCH,07CH,00CH,01EH ; L.C. Q D_71
   615 00006E0F 0000DC766660F000    <1> 	DB	000H,000H,0DCH,076H,066H,060H,0F0H,000H ; L.C. R D_72
   616 00006E17 00007CC0780CF800    <1> 	DB	000H,000H,07CH,0C0H,078H,00CH,0F8H,000H ; L.C. S D_73
   617 00006E1F 10307C3030341800    <1> 	DB	010H,030H,07CH,030H,030H,034H,018H,000H ; L.C. T D_74
   618 00006E27 0000CCCCCCCC7600    <1> 	DB	000H,000H,0CCH,0CCH,0CCH,0CCH,076H,000H ; L.C. U D_75
   619 00006E2F 0000CCCCCC783000    <1> 	DB	000H,000H,0CCH,0CCH,0CCH,078H,030H,000H ; L.C. V D_76
   620 00006E37 0000C6D6FEFE6C00    <1> 	DB	000H,000H,0C6H,0D6H,0FEH,0FEH,06CH,000H ; L.C. W D_77
   621 00006E3F 0000C66C386CC600    <1> 	DB	000H,000H,0C6H,06CH,038H,06CH,0C6H,000H ; L.C. X D_78
   622 00006E47 0000CCCCCC7C0CF8    <1> 	DB	000H,000H,0CCH,0CCH,0CCH,07CH,00CH,0F8H ; L.C. Y D_79
   623 00006E4F 0000FC983064FC00    <1> 	DB	000H,000H,0FCH,098H,030H,064H,0FCH,000H ; L.C. Z D_7A
   624 00006E57 1C3030E030301C00    <1> 	DB	01CH,030H,030H,0E0H,030H,030H,01CH,000H ;   D_7B
   625 00006E5F 1818180018181800    <1> 	DB	018H,018H,018H,000H,018H,018H,018H,000H ;   D_7C
   626 00006E67 E030301C3030E000    <1> 	DB	0E0H,030H,030H,01CH,030H,030H,0E0H,000H ;   D_7D
   627 00006E6F 76DC000000000000    <1> 	DB	076H,0DCH,000H,000H,000H,000H,000H,000H ;   D_7E
   628 00006E77 0010386CC6C6FE00    <1> 	DB	000H,010H,038H,06CH,0C6H,0C6H,0FEH,000H ; DELTA D_7F
   629                              <1> 
   664                                  
   665                                  INT11: ;Equipment Check	
   666 00006E7F 1E                      	PUSH DS			;STORE DS
   667 00006E80 53                      	PUSH BX			;STORE BX
   668 00006E81 B84000                  	MOV AX, 0X0040			;BIOS DATA AREA
   669 00006E84 8ED8                    	MOV DS, AX			;SET DATA SEGMENT
   670 00006E86 BB1000                  	MOV BX, 0X0010			;OFFSET 0X10 EQUIPMENT LIST
   671 00006E89 8B07                    	MOV AX, WORD [BX]			;STORE EQUPMENT LIST AX
   672 00006E8B 5B                      	POP BX			;RESTORE BX
   673 00006E8C 1F                      	POP DS			;RESTORE DS
   674 00006E8D CF                      	IRET			;RETRUN
   675                                  INT12: ;Memory	
   676 00006E8E 1E                      	PUSH DS			;STORE DS
   677 00006E8F 53                      	PUSH BX			;STORE BX
   678 00006E90 B84000                  	MOV AX, 0X0040			;BIOS DATA AREA
   679 00006E93 8ED8                    	MOV DS, AX			;SET DATA SEGMENT
   680 00006E95 BB1300                  	MOV BX, 0X0013			;OFFSET 0X13 FOR MEMORY SIZE
   681 00006E98 8B07                    	MOV AX, WORD [BX]			;STORE MEMORY SIZE AX
   682 00006E9A 5B                      	POP BX			;RESTORE BX
   683 00006E9B 1F                      	POP DS			;RESTORE DS
   684 00006E9C CF                      	IRET			;RETRUN
   685                                  
   686                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   687                                  ;INT 0X13
   688                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   689                                  %INCLUDE "asm/int13.asm"
     1                              <1> 
     2                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                              <1> ;INT 0X13 SOFTWARE DISK INTERRUPTS
     4                              <1> ;DONT FORGET HARDWARE INTERRUPTS ARE DISABLED WHEN SOFTWARE INTERRUPTS ARE CALLED
     5                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     6                              <1> INT13:
     7 00006E9D 80FA80              <1> 	CMP DL, 0X80		;CHECK FOR DISK NUMBER BEING REQUESTED 
     8 00006EA0 7405                <1> 	JE .START_INT13		;JMP IF 0X80 C:
     9 00006EA2 7403E9BE01          <1> 	JNE .NOT_A_DRIVE	;JMP IF NOT C: NOT A DRIVE IN THE SYSTEM
    10                              <1> 
    11                              <1>   .START_INT13:	
    12 00006EA7 80FC00              <1> 	CMP AH, 0X00
    13 00006EAA 7423                <1> 	JE .RESET_DISK_SYSTEM 			;RESET DISK
    14 00006EAC 80FC01              <1> 	CMP AH, 0X01
    15 00006EAF 7424                <1> 	JE .GET_STATUS_LAST_OPERATION	;GET STATUS OF LAST OPERATION 
    16 00006EB1 80FC02              <1> 	CMP AH, 0X02	
    17 00006EB4 7435                <1> 	JE .DISK_READ					;READ DISK CHS
    18 00006EB6 80FC03              <1> 	CMP AH, 0X03
    19                              <1> 	;JE .WRITE_DISK					;WRITE DISK CHS
    20 00006EB9 80FC08              <1> 	CMP AH, 0X08
    21 00006EBC 7503E9E900          <1> 	JE .PARAMETERS					;GET DISK PARAMETERS
    22 00006EC1 80FC15              <1> 	CMP AH, 0X15
    23 00006EC4 7503E94B01          <1> 	JE .GET_DISK_TYPE				;GET DISK TYPE	
    24                              <1> 									;FUNCTION NOT FOUND
    25 00006EC9 B401                <1> 	MOV AH, 0X01					;INVALID FUNCTION IN AH
    26 00006ECB F9                  <1> 	STC								;SET CARRY FLAG 	
    27 00006ECC E98001              <1> 	JMP .INT13_END_WITH_CARRY_FLAG
    28                              <1> 	
    29                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    30                              <1> ;RESET DISK 
    31                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
    32                              <1> .RESET_DISK_SYSTEM:	
    33                              <1> 					
    34 00006ECF B400                <1> 	MOV AH, 0X00		;STATUS 0X00 SUCCESSFULL
    35 00006ED1 F8                  <1> 	CLC					;CLEAR CARRY FLAG SUCCESFUL	
    36 00006ED2 E97A01              <1> 	JMP .INT13_END_WITH_CARRY_FLAG
    37                              <1> 
    38                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                              <1> ;STATUS OF LAST OPERATION  
    40                              <1> ;THIS PROABLY WILL NEED WORK
    41                              <1> ;THE CH376 ERROR STATUS NUMBERS DO NOT MATCH PC COMPATABLE NUMBERS
    42                              <1> ;STATUS 0X14 IS SUCCESS AND INTERPRETED TO RETURN 0X00
    43                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
    44                              <1> .GET_STATUS_LAST_OPERATION:	
    45                              <1> 	
    46 00006ED5 B022                <1> 	MOV AL, 0X22		;GET_STATUS OF INT
    47 00006ED7 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT				
    48 00006ED9 E4E0                <1> 	IN AL, 0XE0			;READ IN STATUS DATA PORT
    49                              <1> 	
    50 00006EDB 3C14                <1> 	CMP AL, 0X14		;CHECK FOR USB_INT_SUCCESS
    51 00006EDD 7506                <1> 	JNE .STATUS_DISK_ERROR;IF USB_INT_SUCCESS
    52                              <1> 	
    53 00006EDF B400                <1> 	MOV AH, 0X00		;STATUS 0X00 SUCCESSFULL
    54 00006EE1 F8                  <1> 	CLC					;CLEAR CARRY FLAG SUCCESFUL	
    55 00006EE2 E96A01              <1> 	JMP .INT13_END_WITH_CARRY_FLAG
    56                              <1> 	
    57                              <1> .STATUS_DISK_ERROR:
    58 00006EE5 88C4                <1> 	MOV AH, AL			;STATUS CODE
    59 00006EE7 F9                  <1> 	STC					;SET CARRY FLAG 	
    60 00006EE8 E96401              <1> 	JMP .INT13_END_WITH_CARRY_FLAG
    61                              <1> 	
    62                              <1> 
    63                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    64                              <1> ;READ DISK SECTOR	
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> ;LBA = (C × HPC + H) × SPT + (S − 1)
    67                              <1> ;MAX NUMBERS C = 0X3FF, H = 0XFF, S = 0X3F
    68                              <1> ;AH = 02h
    69                              <1> ;AL = number of sectors to read (must be nonzero)
    70                              <1> ;CH = low eight bits of cylinder number
    71                              <1> ;CL = sector number 1-63 (bits 0-5)
    72                              <1> ;high two bits of cylinder (bits 6-7, hard disk only)
    73                              <1> ;DH = head number
    74                              <1> ;DL = drive number (bit 7 set for hard disk)
    75                              <1> ;ES:BX -> data buffer
    76                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    77                              <1> .DISK_READ:
    78 00006EEB 53                  <1> 	PUSH BX					;
    79 00006EEC 51                  <1> 	PUSH CX					;STORE REGISTERS
    80 00006EED 52                  <1> 	PUSH DX					;
    81 00006EEE 1E                  <1> 	PUSH DS					;
    82 00006EEF 06                  <1> 	PUSH ES					;
    83                              <1> 	
    84                              <1> 	
    85 00006EF0 50                  <1> 	PUSH AX					;STORE AX / AL NUMBER OF SECTORS
    86 00006EF1 50                  <1> 	PUSH AX					;STORE AX / AL NUMBER OF SECTORS
    87                              <1> 	
    88 00006EF2 51                  <1> 	PUSH CX					;STORE CX / SECTOR NUMBER
    89 00006EF3 52                  <1> 	PUSH DX					;STORE DX / DH HEAD NUMBER
    90                              <1> 	
    91 00006EF4 B800F4              <1> 	MOV AX, 0XF400			;DRIVE DATA AREA
    92 00006EF7 8ED8                <1> 	MOV DS, AX				;SET DS TO 0XF400
    93                              <1> 	
    94 00006EF9 88E8                <1> 	MOV AL, CH				;GET LOWER CYLINDER NUMBER
    95 00006EFB D0E9                <1> 	SHR CL, 0X01			;SHIFT RIGHT 6 TIMES FOR UPPER 2 BITS CYLINDER
    96 00006EFD D0E9                <1> 	SHR CL, 0X01			;
    97 00006EFF D0E9                <1> 	SHR CL, 0X01			;
    98 00006F01 D0E9                <1> 	SHR CL, 0X01			;	
    99 00006F03 D0E9                <1> 	SHR CL, 0X01			;
   100 00006F05 D0E9                <1> 	SHR CL, 0X01			;
   101 00006F07 88CC                <1> 	MOV AH, CL				;AX HOLDS CYLINDER NUMBER			;
   102 00006F09 8B0E1A02            <1> 	MOV CX, [0X021A]		;NUMBER OF HEADS / SIDES (HPC)
   103 00006F0D F7E1                <1> 	MUL CX					;AX = C X HPC
   104 00006F0F 59                  <1> 	POP CX					;GET HEAD NUMBER
   105 00006F10 88E9                <1> 	MOV CL, CH				;MOV HEAD NUMBER
   106 00006F12 B500                <1> 	MOV CH, 0X00			;CLEAR CH
   107 00006F14 01C8                <1> 	ADD AX, CX				;ADD IN HEAD (C X HPC + H)
   108 00006F16 8B0E1802            <1> 	MOV CX, [0X0218]		;SECTORS PER TRACK	
   109 00006F1A F7E1                <1> 	MUL CX					;DX:AX (C X HPC + H) X SPT
   110 00006F1C 59                  <1> 	POP CX					;GET SECTOR NUMBER
   111 00006F1D 83E13F              <1> 	AND CX, 0X003F			;CLEAR OUT CYLINDER
   112 00006F20 49                  <1> 	DEC CX					;(S - 1)
   113 00006F21 01C8                <1> 	ADD AX, CX				;LBA = (C × HPC + H) × SPT + (S − 1)
   114 00006F23 83D200              <1> 	ADC DX, 0X00			;IF THERE IS A CARRY POSIBLE I DONT KNOW
   115                              <1> 							;DX:AX = LBA
   116 00006F26 52                  <1> 	PUSH DX					;STORE LBA UPPER
   117 00006F27 50                  <1> 	PUSH AX					;STORE LBA LOWER
   118                              <1> 		
   119                              <1> 	
   120 00006F28 B054                <1> 	MOV AL, 0X54	;DISK_READ
   121 00006F2A E6E4                <1> 	OUT 0XE4, AL	;OUT COMMAND PORT
   122 00006F2C 58                  <1> 	POP AX			;GET LOWER LBA
   123 00006F2D E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   124 00006F2F 88E0                <1> 	MOV AL, AH		;NEXT BYTE
   125 00006F31 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   126 00006F33 58                  <1> 	POP AX			;GET UPPER LBA
   127 00006F34 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   128 00006F36 88E0                <1> 	MOV AL, AH		;NEXT BYTE
   129 00006F38 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   130 00006F3A 58                  <1> 	POP AX			;GET NUMBER OF SECTORS
   131 00006F3B E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   132                              <1> 
   133                              <1> .READ_SECTOR:
   134 00006F3D B9FF00              <1> 	MOV CX, 0X00FF		;DELAY 
   135 00006F40 E2FE                <1> 	DB 0XE2, 0XFE		;LOOP BACK
   136                              <1> 	
   137 00006F42 B022                <1> 	MOV AL, 0X22		;GET_STATUS
   138 00006F44 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   139 00006F46 E4E0                <1> 	IN AL, 0XE0			;READ IN STATUS DATA PORT
   140 00006F48 3C14                <1> 	CMP AL, 0X14		;CHECK FOR USB_INT_SUCCESS COMPLETED READING
   141 00006F4A 7446                <1> 	JE .READ_DISK_SUCCESS;IF USB_INT_SUCCESS
   142 00006F4C 3C1D                <1> 	CMP AL, 0X1D		;COMPARE TO USB_INT_DISK_READ
   143 00006F4E 7518                <1> 	JNE .NOT_1D			;IF NOT USB_INT_DISK_READ
   144                              <1> 	
   145 00006F50 B027                <1> 	MOV AL, 0X27		;RD_USB_DATA0
   146 00006F52 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   147 00006F54 E4E0                <1> 	IN AL, 0XE0			;READ NUMBER OF BYTES FROM DATA PORT 
   148 00006F56 B400                <1> 	MOV AH, 0X00		;CLEAR AH
   149 00006F58 89C1                <1> 	MOV CX, AX			;SET CX TO NUMBER OF BYTES
   150                              <1>   .READ_IN_LOOP:		;LOOP LABLE
   151 00006F5A E4E0                <1> 	IN AL, 0XE0			;READ BYTE
   152 00006F5C 268807              <1> 	MOV [ES:BX], AL		;STORE BYTE
   153 00006F5F 43                  <1> 	INC BX				;INC BX
   154 00006F60 E2F8                <1> 	LOOP .READ_IN_LOOP	;LOOP UNTIL DONE
   155                              <1> 	
   156 00006F62 B055                <1> 	MOV AL, 0X55		;DISK_RD_GO READ NEXT 64 BYTES
   157 00006F64 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   158 00006F66 EBD5                <1> 	JMP .READ_SECTOR	;LOOP UNTIL DONE
   159                              <1> 
   160                              <1> 		
   161                              <1> .NOT_1D:
   162 00006F68 E88904              <1> 	CALL WIRTE_AL_INT10_E			;PRINTS ERROR NUMBER TO SCREEN
   163 00006F6B 8CC8                <1> 	MOV AX, CS						;GET CS 
   164 00006F6D 8ED8                <1> 	MOV DS, AX						;SET DS TO CS
   165 00006F6F B40E                <1> 	MOV AH, 0X0E					;FOR TELOTYPE
   166 00006F71 B91200              <1> 	MOV CX, .END_READ_ERROR_MESSAGE - .READ_ERROR_MESSAGE
   167 00006F74 BB[806F]            <1> 	MOV BX, .READ_ERROR_MESSAGE	
   168                              <1> 	.LOOP_NOT_1D:
   169 00006F77 8A07                <1> 	MOV AL, [BX]					;GET BYTE 
   170 00006F79 CD10                <1> 	INT 0X10						;PRINT TO SCREEN
   171 00006F7B 43                  <1> 	INC BX							;INC BX
   172 00006F7C E2F9                <1> 	LOOP .LOOP_NOT_1D				;LOOP UNTIL DONE
   173 00006F7E EB1E                <1> 	JMP .READ_DISK_ERROR
   174                              <1> 
   175                              <1> 	.READ_ERROR_MESSAGE:
   176 00006F80 0D0A55534220524541- <1> 	DB 0X0D, 0X0A, 'USB READ ERR0R', 0X0D, 0X0A
   176 00006F89 442045525230520D0A  <1>
   177                              <1> 	.END_READ_ERROR_MESSAGE:
   178                              <1> 
   179                              <1> .READ_DISK_SUCCESS:
   180 00006F92 58                  <1> 	POP AX
   181 00006F93 07                  <1> 	POP ES
   182 00006F94 1F                  <1> 	POP DS
   183 00006F95 5A                  <1> 	POP DX
   184 00006F96 59                  <1> 	POP CX
   185 00006F97 5B                  <1> 	POP BX
   186 00006F98 B400                <1> 	MOV AH, 0X00		;STATUS 0X00 SUCCESSFULL
   187 00006F9A F8                  <1> 	CLC					;CLEAR CARRY FLAG SUCCESFUL	
   188 00006F9B E9B100              <1> 	JMP .INT13_END_WITH_CARRY_FLAG
   189                              <1> 	
   190                              <1> .READ_DISK_ERROR:
   191 00006F9E 07                  <1> 	POP ES
   192 00006F9F 07                  <1> 	POP ES
   193 00006FA0 1F                  <1> 	POP DS
   194 00006FA1 5A                  <1> 	POP DX
   195 00006FA2 59                  <1> 	POP CX
   196 00006FA3 5B                  <1> 	POP BX
   197                              <1> 
   198 00006FA4 88C4                <1> 	MOV AH, AL			;STATUS CODE
   199 00006FA6 F9                  <1> 	STC					;SET CARRY FLAG 
   200 00006FA7 E9A500              <1> 	JMP .INT13_END_WITH_CARRY_FLAG
   201                              <1> 
   202                              <1> 
   203                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   204                              <1> ;GET PARAMETERS	0X08
   205                              <1> ;RETURNS
   206                              <1> ;AH=STATUS 0X00 IS GOOD
   207                              <1> ;BL=DOES NOT APPLY 
   208                              <1> ;CH=CYLINDERS
   209                              <1> ;CL=0-5 SECTORS PER TRACK 6-7 UPPER 2 BITS CYLINDER
   210                              <1> ;DH=NUMBER OF HEADS / SIDES -1
   211                              <1> ;DL=NUMBER OF DRIVES
   212                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
   213                              <1> .PARAMETERS:
   214 00006FAA 50                  <1> 	PUSH AX					;STORE AX
   215 00006FAB 53                  <1> 	PUSH BX					;STORE BX
   216 00006FAC 1E                  <1> 	PUSH DS					;STORE DS
   217                              <1> 	
   218 00006FAD B800F4              <1> 	MOV AX, 0XF400			;DRIVE DATA AREA
   219 00006FB0 8ED8                <1> 	MOV DS, AX				;SET DS TO 0XF400
   220                              <1> 	
   221 00006FB2 BBFE03              <1> 	MOV BX, 0X03FE			;INDEX OF VOLUME BOOT SIGNATURE 
   222 00006FB5 813F55AA            <1> 	CMP WORD [BX], 0XAA55	;TEST TO SEE IF PRESENT
   223 00006FB9 7551                <1> 	JNE .PARAMETERS_NOT_P 	;IF NOT THERE
   224                              <1> 	
   225 00006FBB BB1302              <1> 	MOV BX, 0X0213			;INDEX 0XF400:0X0213 SMALL SECTOR COUNT
   226 00006FBE 833F00              <1> 	CMP WORD [BX], 0X0000	;IF ZERO THEN IT IS A LARGER THAN 32MB
   227 00006FC1 7408                <1> 	JE .LARGE_SECTOR_COUNT_PARAMETERS	;JMP TO LARGE DRIVE CODE
   228                              <1> 	
   229                              <1> .SMALL_SECTOR_COUNT_PARAMETERS:	
   230 00006FC3 BA0000              <1> 	MOV DX, 0X0000			;DX = 0
   231 00006FC6 A11302              <1> 	MOV AX, [0X213]			;GET SECTOR COUNT
   232 00006FC9 EB09                <1> 	JMP .CONTINUE_PARAMETERS
   233                              <1> .LARGE_SECTOR_COUNT_PARAMETERS:	
   234 00006FCB 8B162202            <1> 	MOV DX, [0X0222]		;DX UPPER 2 BYTES SECTOR COUNT
   235 00006FCF A12002              <1> 	MOV AX, [0X0220]		;AX LOWER 2 BYTES SECTOR COUNT	
   236 00006FD2 EB00                <1> 		JMP .CONTINUE_PARAMETERS
   237                              <1> .CONTINUE_PARAMETERS:
   238 00006FD4 8B0E1802            <1> 	MOV CX, [0X0218]		;SECTORS PER TRACK
   239 00006FD8 F7F1                <1> 	DIV CX					;DIV DX:AX / CX
   240 00006FDA BA0000              <1> 	MOV DX, 0X0000			;CLEAR DX JUST IN CASE THERE SHOULD NOT BE A REMANDER 
   241 00006FDD 8B0E1A02            <1> 	MOV CX, [0X021A]		;NUMBER OF HEADS / SIDES
   242 00006FE1 F7F1                <1> 	DIV CX					;DIV DX:AX / CX
   243                              <1> 							;NOW WE HAVE CYLINDERS 
   244 00006FE3 88C5                <1> 	MOV CH, AL				;CH=0-7 CYLINDERS
   245 00006FE5 D0E4                <1> 	SHL AH, 0X01			;SHIFT LEFT 6 TIMES UPPER 2 BITS CYLINDER
   246 00006FE7 D0E4                <1> 	SHL AH, 0X01			;
   247 00006FE9 D0E4                <1> 	SHL AH, 0X01			;
   248 00006FEB D0E4                <1> 	SHL AH, 0X01			;
   249 00006FED D0E4                <1> 	SHL AH, 0X01			;
   250 00006FEF D0E4                <1> 	SHL AH, 0X01			;
   251 00006FF1 8A0E1802            <1> 	MOV CL, [0X0218]		;SECTORS PER TRACK
   252 00006FF5 80E13F              <1> 	AND CL, 0X3F			;CLEAR BITS 7-6
   253 00006FF8 00E1                <1> 	ADD CL, AH				;ADD IN 8-9 BITS CYLINDER
   254 00006FFA 8A361A02            <1> 	MOV DH,  [0X021A]		;NUMBER OF HEADS / SIDES
   255 00006FFE FECE                <1> 	DEC DH					;START 0 NOT 1
   256 00007000 B201                <1> 	MOV DL, 0X01			;NUMBER OF DRIVES
   257 00007002 EB00                <1> 	JMP .END_PARAMETERS
   258                              <1> 
   259                              <1> .END_PARAMETERS:
   260 00007004 1F                  <1> 	POP DS				;RESTORE DS
   261 00007005 5B                  <1> 	POP BX				;RESTORE BX
   262 00007006 58                  <1> 	POP AX				;RESTORE AX
   263                              <1> 	
   264 00007007 B400                <1> 	MOV AH, 0X00		;STATUS 0X00 SUCCESSFULL
   265 00007009 F8                  <1> 	CLC					;CLEAR CARRY FLAG SUCCESFUL	
   266 0000700A EB43                <1> 	JMP .INT13_END_WITH_CARRY_FLAG
   267                              <1> 	
   268                              <1> .PARAMETERS_NOT_P:
   269 0000700C 1F                  <1> 	POP DS				;RESTORE DS
   270 0000700D 5B                  <1> 	POP BX				;RESTORE BX
   271 0000700E 58                  <1> 	POP AX				;RESTORE AX
   272                              <1> 	
   273 0000700F B401                <1> 	MOV AH, 0X01		;STATUS 0X00 SUCCESSFULL
   274 00007011 F9                  <1> 	STC 				;SET CARRY FLAG	
   275 00007012 EB3B                <1> 	JMP .INT13_END_WITH_CARRY_FLAG
   276                              <1> 
   277                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   278                              <1> ;GET DISK TYPE	0X15
   279                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   280                              <1> .GET_DISK_TYPE:
   281 00007014 53                  <1> 	PUSH BX					;STORE BX
   282 00007015 1E                  <1> 	PUSH DS					;STORE DS
   283 00007016 B800F4              <1> 	MOV AX, 0XF400			;DRIVE DATA AREA
   284 00007019 8ED8                <1> 	MOV DS, AX				;SET DS TO 0XF400
   285                              <1> 	
   286 0000701B BBFE03              <1> 	MOV BX, 0X03FE			;INDEX OF VOLUME BOOT SIGNATURE 
   287 0000701E 813F55AA            <1> 	CMP WORD [BX], 0XAA55	;TEST TO SEE IF PRESENT
   288 00007022 7521                <1> 	JNE .GET_DISK_TYPE_NOT_P ;IF NOT THERE
   289                              <1> 	
   290 00007024 BB1302              <1> 	MOV BX, 0X0213			;INDEX 0XF400:0X0213 SMALL SECTOR COUNT
   291 00007027 833F00              <1> 	CMP WORD [BX], 0X0000	;IF ZERO THEN IT IS A LARGER THAN 32MB
   292 0000702A 740A                <1> 	JE .LARGE_SECTOR_COUNT	;JMP TO LARGE DRIVE CODE
   293                              <1> 	
   294                              <1> .SMALL_SECTOR_COUNT:
   295 0000702C 8B17                <1> 	MOV DX, [BX]			;CX:DX NUMBER OF SECTORS
   296 0000702E B90000              <1> 	MOV CX, 0X0000			;SMALL SECTOR CX IS 0X0000
   297 00007031 B80003              <1> 	MOV AX, 0X0300			;AH=0X03 FIXED DISK AL=RETURN 0X00
   298 00007034 EB14                <1> 	JMP .END_GET_DISK_TYPE	;END
   299                              <1> 	
   300                              <1> .LARGE_SECTOR_COUNT:
   301 00007036 BB2002              <1> 	MOV BX, 0X0220			;INDEX 0XF400:0X0200 LARGE SECTOR COUNT
   302 00007039 8B17                <1> 	MOV DX, [BX]			;CX:DX NUMBER OF SECTORS
   303 0000703B 83C302              <1> 	ADD BX, 0X02			;INC BX 2
   304 0000703E 8B0F                <1> 	MOV CX, [BX]			;CX:DX NUMBER OF SECTORS
   305 00007040 B80003              <1> 	MOV AX, 0X0300			;AH=0X03 FIXED DISK AL=RETURN 0X00
   306 00007043 EB05                <1> 	JMP .END_GET_DISK_TYPE	;END
   307                              <1> 	
   308                              <1> .GET_DISK_TYPE_NOT_P:
   309 00007045 B80000              <1> 	MOV AX, 0X0000			;AH=0X00 WHEN NOT PRESENT 
   310 00007048 EB00                <1> 	JMP .END_GET_DISK_TYPE
   311                              <1> 	
   312                              <1> .END_GET_DISK_TYPE:
   313 0000704A 1F                  <1> 	POP DS					;RESTORE DS
   314 0000704B 5B                  <1> 	POP BX					;RESTORE BX
   315 0000704C F8                  <1> 	CLC						;CLEAR CARRY FLAG SUCCESFUL	
   316 0000704D EB00                <1> 	JMP .INT13_END_WITH_CARRY_FLAG
   317                              <1> 
   318                              <1> 
   319                              <1> 	
   320                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   321                              <1> ;END INT 0X13 WITH UPDATED CARRY FLAG		
   322                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   323                              <1>   .INT13_END_WITH_CARRY_FLAG:	;THIS IS HOW I RETURN THE CARRY FLAG
   324 0000704F 50                  <1> 	PUSH AX						;STORE AX
   325 00007050 9C                  <1> 	PUSHF						;STORE FLAGS
   326 00007051 58                  <1> 	POP AX						;GET AX = FLAGS
   327 00007052 55                  <1> 	PUSH BP						;STORE BP
   328 00007053 89E5                <1> 	MOV BP, SP              	;Copy SP to BP for use as index
   329 00007055 83C508              <1> 	ADD BP, 0X08				;offset 8
   330 00007058 836600FE            <1> 	AND WORD [BP], 0XFFFE		;CLEAR CF = ZER0
   331 0000705C 83E001              <1> 	AND AX, 0X0001				;ONLY CF 
   332 0000705F 094600              <1> 	OR	WORD [BP], AX			;SET CF AX
   333 00007062 5D                  <1> 	POP BP               		;RESTORE BASE POINTER
   334 00007063 58                  <1> 	POP AX						;RESTORE AX	
   335 00007064 CF                  <1> 	IRET						;RETRUN
   336                              <1> 
   337                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   338                              <1> ;WHEN REQUEST IS NOT A VALID DRIVE NUMBER
   339                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   340                              <1>   .NOT_A_DRIVE:
   341 00007065 B401                <1> 	MOV AH, 0X01	;STATUS 0X00 SUCCESSFULL
   342 00007067 F9                  <1> 	STC				;SET CARRY FLAG
   343 00007068 EBE5                <1> 	JMP .INT13_END_WITH_CARRY_FLAG
   344                              <1> 
   345                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   346                              <1> ;THIS LOADS THE MBR TO 0XF400:0000
   347                              <1> ;LOADS THE VBR TO 0XF400:0200
   348                              <1> ;USED BY INT 0X13 FOR CHS->LBA CALC	
   349                              <1> ;THE VBR HAS THE DRIVE GEOMETRY AT 
   350                              <1> ;0XF400:0X0218 DW SPT
   351                              <1> ;0XF400:0X021A DW HPC
   352                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   353                              <1> 
   354                              <1> LOAD_BOOT_RECORD:
   355                              <1> 	
   356 0000706A 9C                  <1> 	PUSHF			;STORE FLAGS
   357 0000706B FA                  <1> 	CLI				;
   358 0000706C 50                  <1> 	PUSH AX			;STORE AX
   359 0000706D 53                  <1> 	PUSH BX			;STORE BX
   360 0000706E 51                  <1> 	PUSH CX			;STORE CX
   361 0000706F 1E                  <1> 	PUSH DS			;STORE DS
   362 00007070 B800F4              <1> 	MOV AX, 0XF400	;
   363 00007073 8ED8                <1> 	MOV DS, AX		;SET DS 0XF400 UPPER RAM
   364 00007075 BB0000              <1> 	MOV BX, 0X0000	;SET BX 0 FOR INDEX
   365                              <1> 					;READ MBR
   366 00007078 B054                <1> 	MOV AL, 0X54	;DISK_READ COMMAND
   367 0000707A E6E4                <1> 	OUT 0XE4, AL	;OUT COMMAND PORT
   368 0000707C B000                <1> 	MOV AL, 0X00	;LBA 0X00000000
   369 0000707E E6E0                <1> 	OUT 0XE0, AL	;OUT COMMAND PORT
   370 00007080 E6E0                <1> 	OUT 0XE0, AL	;OUT COMMAND PORT
   371 00007082 E6E0                <1> 	OUT 0XE0, AL	;OUT COMMAND PORT
   372 00007084 E6E0                <1> 	OUT 0XE0, AL	;OUT COMMAND PORT
   373 00007086 B001                <1> 	MOV AL, 0X01	;READ ONE SECTOR
   374 00007088 E6E0                <1> 	OUT 0XE0, AL	;OUT COMMAND PORT
   375                              <1> 
   376                              <1> .READ_MBR_SECTOR:
   377 0000708A B9FF00              <1> 	MOV CX, 0X00FF		;DELAY 
   378 0000708D E2FE                <1> 	DB 0XE2, 0XFE		;LOOP BACK
   379                              <1> 	
   380 0000708F B022                <1> 	MOV AL, 0X22		;GET_STATUS
   381 00007091 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   382 00007093 E4E0                <1> 	IN AL, 0XE0			;READ IN STATUS DATA PORT
   383 00007095 3C14                <1> 	CMP AL, 0X14		;CHECK FOR USB_INT_SUCCESS COMPLETED READING
   384 00007097 7472                <1> 	JE .READ_MBR_SUCCESS;IF USB_INT_SUCCESS
   385 00007099 3C1D                <1> 	CMP AL, 0X1D		;COMPARE TO USB_INT_DISK_READ
   386 0000709B 7517                <1> 	JNE .NOT_1D			;IF NOT USB_INT_DISK_READ
   387                              <1> 	
   388 0000709D B027                <1> 	MOV AL, 0X27		;RD_USB_DATA0
   389 0000709F E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   390 000070A1 E4E0                <1> 	IN AL, 0XE0			;READ NUMBER OF BYTES FROM DATA PORT 
   391 000070A3 B400                <1> 	MOV AH, 0X00		;CLEAR AH
   392 000070A5 89C1                <1> 	MOV CX, AX			;SET CX TO NUMBER OF BYTES
   393                              <1>   .READ_MBR_LOOP:		;LOOP LABLE
   394 000070A7 E4E0                <1> 	IN AL, 0XE0			;READ BYTE
   395 000070A9 8807                <1> 	MOV [BX], AL		;WRITE BYTE TO DS:BX
   396 000070AB 43                  <1> 	INC BX				;INC INDEX
   397 000070AC E2F9                <1> 	LOOP .READ_MBR_LOOP	;LOOP UNTIL DONE
   398                              <1> 	
   399 000070AE B055                <1> 	MOV AL, 0X55		;DISK_RD_GO READ NEXT 64 BYTES
   400 000070B0 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   401 000070B2 EBD6                <1> 	JMP .READ_MBR_SECTOR;LOOP UNTIL DONE
   402                              <1> 
   403                              <1> .NOT_1D:
   404 000070B4 E83D03              <1> 	CALL WIRTE_AL_INT10_E			;PRINTS ERROR NUMBER TO SCREEN	
   405 000070B7 8CC8                <1> 	MOV AX, CS						;GET CS 
   406 000070B9 8ED8                <1> 	MOV DS, AX						;SET DS TO CS
   407 000070BB B40E                <1> 	MOV AH, 0X0E					;FOR TELOTYPE
   408 000070BD B91100              <1> 	MOV CX, .END_READ_ERROR_MESSAGE - .READ_ERROR_MESSAGE
   409 000070C0 BB[CD70]            <1> 	MOV BX, .READ_ERROR_MESSAGE	
   410                              <1> 	.LOOP_NOT_1D:
   411 000070C3 8A07                <1> 	MOV AL, [BX]					;GET BYTE 
   412 000070C5 CD10                <1> 	INT 0X10						;PRINT TO SCREEN
   413 000070C7 43                  <1> 	INC BX							;INC BX
   414 000070C8 E2F9                <1> 	LOOP .LOOP_NOT_1D				;LOOP UNTIL DONE
   415                              <1> 	
   416 000070CA E98F01              <1> 	JMP .END_LOAD_BOOT_RECORD
   417                              <1> 
   418                              <1> 	.READ_ERROR_MESSAGE:
   419 000070CD 205553422052454144- <1> 	DB ' USB READ ERR0R', 0X0D, 0X0A
   419 000070D6 2045525230520D0A    <1>
   420                              <1> 	.END_READ_ERROR_MESSAGE:
   421                              <1> 	
   422                              <1> .NOT_BOOTABLE_MBR:
   423 000070DE 8CC8                <1> 	MOV AX, CS						;GET CS 
   424 000070E0 8ED8                <1> 	MOV DS, AX						;SET DS TO CS
   425 000070E2 B40E                <1> 	MOV AH, 0X0E					;FOR TELOTYPE
   426 000070E4 B91700              <1> 	MOV CX, .END_NOT_MBR_MESSAGE - .NOT_MBR_MESSAGE
   427 000070E7 BB[F470]            <1> 	MOV BX, .NOT_MBR_MESSAGE
   428                              <1>     .LOOP_NOT_MBR:	
   429 000070EA 8A07                <1> 	MOV AL, [BX]					;GET BYTE 
   430 000070EC CD10                <1> 	INT 0X10						;PRINT TO SCREEN
   431 000070EE 43                  <1> 	INC BX							;INC BX
   432 000070EF E2F9                <1> 	LOOP .LOOP_NOT_MBR				;LOOP UNTIL DONE
   433                              <1> 	
   434 000070F1 E96801              <1> 	JMP .END_LOAD_BOOT_RECORD
   435                              <1> 
   436                              <1> 	.NOT_MBR_MESSAGE:
   437 000070F4 4E4F20424F4F542053- <1> 	DB 'NO BOOT SIGNATURE MBR', 0X0D, 0X0A
   437 000070FD 49474E415455524520- <1>
   437 00007106 4D42520D0A          <1>
   438                              <1> 	.END_NOT_MBR_MESSAGE:
   439                              <1> 	
   440                              <1> .READ_MBR_SUCCESS:
   441 0000710B BBFE01              <1> 	MOV BX, 0X01FE			;END OF MBR DS STILL IS 0XF400
   442 0000710E 813F55AA            <1> 	CMP WORD [BX], 0XAA55	;BOOT SIGNATURE DS:BX
   443 00007112 75CA                <1> 	JNE .NOT_BOOTABLE_MBR	;IF BOOT SIGNATURE IS NOT THERE
   444                              <1> 	
   445 00007114 E81A03              <1> 	CALL WAIT_8			;DELAY NEEDED BEFORE READING THE NEXT SECTOR 
   446                              <1> 			
   447                              <1> 	
   448 00007117 BBBE01              <1> 	MOV BX, 0X01BE			;FIRST PARTITION ENTRY 
   449 0000711A 803F80              <1> 	CMP BYTE [BX], 0X80		;CHECK FOR BOOTABLE
   450 0000711D 741B                <1> 	JE .BOOT_FIRST_ENTRY	;
   451 0000711F BBCE01              <1> 	MOV BX, 0X01CE			;SECOND PARTITION ENTRY 
   452 00007122 803F80              <1> 	CMP BYTE [BX], 0X80		;CHECK FOR BOOTABLE
   453 00007125 7437                <1> 	JE .BOOT_SECOND_ENTRY	;
   454 00007127 BBDE01              <1> 	MOV BX, 0X01DE			;THRID PARTITION ENTRY 
   455 0000712A 803F80              <1> 	CMP BYTE [BX], 0X80		;CHECK FOR BOOTABLE
   456 0000712D 7453                <1> 	JE .BOOT_THIRD_ENTRY	;
   457 0000712F BBEE01              <1> 	MOV BX, 0X01EE			;FORTH PARTITION ENTRY 
   458 00007132 803F80              <1> 	CMP BYTE [BX], 0X80		;CHECK FOR BOOTABLE
   459 00007135 746F                <1> 	JE .BOOT_FORTH_ENTRY	;
   460 00007137 E9F400              <1> 	JMP .NO_BOOTABLE_PARTITION
   461                              <1> 	
   462                              <1> .BOOT_FIRST_ENTRY:	
   463 0000713A B054                <1> 	MOV AL, 0X54	;DISK_READ COMMAND
   464 0000713C E6E4                <1> 	OUT 0XE4, AL	;OUT COMMAND PORT
   465 0000713E BBC601              <1> 	MOV BX, 0X01C6	;PARTITION LBA START LOCATION
   466 00007141 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   467 00007143 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   468 00007145 43                  <1> 	INC BX			;NEXT BYTE
   469 00007146 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   470 00007148 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   471 0000714A 43                  <1> 	INC BX			;NEXT BYTE
   472 0000714B 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   473 0000714D E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   474 0000714F 43                  <1> 	INC BX			;NEXT BYTE
   475 00007150 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   476 00007152 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   477 00007154 43                  <1> 	INC BX			;NEXT BYTE
   478 00007155 B001                <1> 	MOV AL, 0X01	;READ ONE SECTOR
   479 00007157 E6E0                <1> 	OUT 0XE0, AL
   480 00007159 BB0002              <1> 	MOV BX, 0X0200	;SET BX 200 FOR INDEX
   481 0000715C EB6C                <1> 	JMP .READ_VBR_SECTOR
   482                              <1> .BOOT_SECOND_ENTRY:
   483 0000715E B054                <1> 	MOV AL, 0X54	;DISK_READ COMMAND
   484 00007160 E6E4                <1> 	OUT 0XE4, AL	;OUT COMMAND PORT
   485 00007162 BBD601              <1> 	MOV BX, 0X01D6	;PARTITION LBA START LOCATION
   486 00007165 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   487 00007167 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   488 00007169 43                  <1> 	INC BX			;NEXT BYTE
   489 0000716A 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   490 0000716C E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   491 0000716E 43                  <1> 	INC BX			;NEXT BYTE
   492 0000716F 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   493 00007171 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   494 00007173 43                  <1> 	INC BX			;NEXT BYTE
   495 00007174 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   496 00007176 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   497 00007178 43                  <1> 	INC BX			;NEXT BYTE
   498 00007179 B001                <1> 	MOV AL, 0X01	;READ ONE SECTOR
   499 0000717B E6E0                <1> 	OUT 0XE0, AL
   500 0000717D BB0002              <1> 	MOV BX, 0X0200	;SET BX 200 FOR INDEX
   501 00007180 EB48                <1> 	JMP .READ_VBR_SECTOR
   502                              <1> .BOOT_THIRD_ENTRY:
   503 00007182 B054                <1> 	MOV AL, 0X54	;DISK_READ COMMAND
   504 00007184 E6E4                <1> 	OUT 0XE4, AL	;OUT COMMAND PORT
   505 00007186 BBE601              <1> 	MOV BX, 0X01E6	;PARTITION LBA START LOCATION
   506 00007189 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   507 0000718B E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   508 0000718D 43                  <1> 	INC BX			;NEXT BYTE
   509 0000718E 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   510 00007190 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   511 00007192 43                  <1> 	INC BX			;NEXT BYTE
   512 00007193 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   513 00007195 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   514 00007197 43                  <1> 	INC BX			;NEXT BYTE
   515 00007198 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   516 0000719A E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   517 0000719C 43                  <1> 	INC BX			;NEXT BYTE
   518 0000719D B001                <1> 	MOV AL, 0X01	;READ ONE SECTOR
   519 0000719F E6E0                <1> 	OUT 0XE0, AL
   520 000071A1 BB0002              <1> 	MOV BX, 0X0200	;SET BX 200 FOR INDEX
   521 000071A4 EB24                <1> 	JMP .READ_VBR_SECTOR
   522                              <1> .BOOT_FORTH_ENTRY:
   523 000071A6 B054                <1> 	MOV AL, 0X54	;DISK_READ COMMAND
   524 000071A8 E6E4                <1> 	OUT 0XE4, AL	;OUT COMMAND PORT
   525 000071AA BBF601              <1> 	MOV BX, 0X01F6	;PARTITION LBA START LOCATION
   526 000071AD 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   527 000071AF E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   528 000071B1 43                  <1> 	INC BX			;NEXT BYTE
   529 000071B2 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   530 000071B4 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   531 000071B6 43                  <1> 	INC BX			;NEXT BYTE
   532 000071B7 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   533 000071B9 E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   534 000071BB 43                  <1> 	INC BX			;NEXT BYTE
   535 000071BC 8A07                <1> 	MOV AL, [BX]	;GET BYTE
   536 000071BE E6E0                <1> 	OUT 0XE0, AL	;OUT DATA PORT
   537 000071C0 43                  <1> 	INC BX			;NEXT BYTE
   538 000071C1 B001                <1> 	MOV AL, 0X01	;READ ONE SECTOR
   539 000071C3 E6E0                <1> 	OUT 0XE0, AL
   540 000071C5 BB0002              <1> 	MOV BX, 0X0200	;SET BX 200 FOR INDEX
   541 000071C8 EB00                <1> 	JMP .READ_VBR_SECTOR
   542                              <1> 	
   543                              <1> .READ_VBR_SECTOR:
   544 000071CA B9FF00              <1> 	MOV CX, 0X00FF		;DELAY 
   545 000071CD E2FE                <1> 	DB 0XE2, 0XFE		;LOOP BACK
   546                              <1> 	
   547 000071CF B022                <1> 	MOV AL, 0X22		;GET_STATUS
   548 000071D1 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   549 000071D3 E4E0                <1> 	IN AL, 0XE0			;READ IN STATUS DATA PORT
   550 000071D5 3C14                <1> 	CMP AL, 0X14		;CHECK FOR USB_INT_SUCCESS COMPLETED READING
   551 000071D7 741E                <1> 	JE .READ_VBR_SUCCESS;IF USB_INT_SUCCESS
   552 000071D9 3C1D                <1> 	CMP AL, 0X1D		;COMPARE TO USB_INT_DISK_READ
   553 000071DB 7403E9D4FE          <1> 	JNE .NOT_1D			;IF NOT USB_INT_DISK_READ
   554                              <1> 	
   555 000071E0 B027                <1> 	MOV AL, 0X27		;RD_USB_DATA0
   556 000071E2 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   557 000071E4 E4E0                <1> 	IN AL, 0XE0			;READ NUMBER OF BYTES FROM DATA PORT 
   558 000071E6 B400                <1> 	MOV AH, 0X00		;CLEAR AH
   559 000071E8 89C1                <1> 	MOV CX, AX			;SET CX TO NUMBER OF BYTES
   560                              <1>   .READ_VBR_LOOP:		;LOOP LABLE
   561 000071EA E4E0                <1> 	IN AL, 0XE0			;READ BYTE
   562 000071EC 8807                <1> 	MOV [BX], AL		;WRITE BYTE TO DS:BX
   563 000071EE 43                  <1> 	INC BX				;INC INDEX
   564                              <1> 
   565 000071EF E2F9                <1> 	LOOP .READ_VBR_LOOP	;LOOP UNTIL DONE
   566                              <1> 	
   567 000071F1 B055                <1> 	MOV AL, 0X55		;DISK_RD_GO READ NEXT 64 BYTES
   568 000071F3 E6E4                <1> 	OUT 0XE4, AL		;OUT COMMAND PORT
   569 000071F5 EBD3                <1> 	JMP .READ_VBR_SECTOR	;LOOP UNTIL DONE
   570                              <1> 
   571                              <1> .READ_VBR_SUCCESS:
   572 000071F7 BBFE01              <1> 	MOV BX, 0X01FE			;END OF MBR
   573 000071FA 813F55AA            <1> 	CMP WORD [BX], 0XAA55	;BOOT SIGNATURE
   574 000071FE 7502                <1> 	JNE .NOT_BOOTABLE_VBR 	;IF BOOT SIGNATURE IS NOT THERE
   575                              <1> 	
   576 00007200 EB5A                <1> 	JMP .END_LOAD_BOOT_RECORD	
   577                              <1> 	
   578                              <1> .NOT_BOOTABLE_VBR:
   579 00007202 8CC8                <1> 	MOV AX, CS						;GET CS 
   580 00007204 8ED8                <1> 	MOV DS, AX						;SET DS TO CS
   581 00007206 B40E                <1> 	MOV AH, 0X0E					;FOR TELOTYPE
   582 00007208 B91700              <1> 	MOV CX, .END_NOT_VBR_MESSAGE - .NOT_VBR_MESSAGE
   583 0000720B BB[1772]            <1> 	MOV BX, .NOT_VBR_MESSAGE	
   584                              <1> 	.LOOP_NOT_VBR:
   585 0000720E 8A07                <1> 	MOV AL, [BX]					;GET BYTE 
   586 00007210 CD10                <1> 	INT 0X10						;PRINT TO SCREEN
   587 00007212 43                  <1> 	INC BX							;INC BX
   588 00007213 E2F9                <1> 	LOOP .LOOP_NOT_VBR				;LOOP UNTIL DONE
   589                              <1> 	
   590 00007215 EB45                <1> 	JMP .END_LOAD_BOOT_RECORD
   591                              <1> 
   592                              <1> 	.NOT_VBR_MESSAGE:
   593 00007217 4E4F20424F4F542053- <1> 	DB 'NO BOOT SIGNATURE VBR', 0X0D, 0X0A
   593 00007220 49474E415455524520- <1>
   593 00007229 5642520D0A          <1>
   594                              <1> 	.END_NOT_VBR_MESSAGE:
   595                              <1> 
   596                              <1> .NO_BOOTABLE_PARTITION:
   597 0000722E 8CC8                <1> 	MOV AX, CS						;GET CS 
   598 00007230 8ED8                <1> 	MOV DS, AX						;SET DS TO CS
   599 00007232 B40E                <1> 	MOV AH, 0X0E					;FOR TELOTYPE
   600 00007234 B91900              <1> 	MOV CX, .END_NO_BOOTABLE_PARTITION_MESSAGE - .NO_BOOTABLE_PARTITION_MESSAGE
   601 00007237 BB[4372]            <1> 	MOV BX, .NO_BOOTABLE_PARTITION_MESSAGE	
   602                              <1> 	.LOOP_NO_BOOT_PARTITION:
   603 0000723A 8A07                <1> 	MOV AL, [BX]					;GET BYTE 
   604 0000723C CD10                <1> 	INT 0X10						;PRINT TO SCREEN
   605 0000723E 43                  <1> 	INC BX							;INC BX
   606 0000723F E2F9                <1> 	LOOP .LOOP_NO_BOOT_PARTITION	;LOOP UNTIL DONE
   607                              <1> 	
   608 00007241 EB19                <1> 	JMP .END_LOAD_BOOT_RECORD
   609                              <1> 
   610                              <1> 	.NO_BOOTABLE_PARTITION_MESSAGE:
   611 00007243 4E4F20424F4F542050- <1> 	DB 'NO BOOT PARTITION FOUND', 0X0D, 0X0A
   611 0000724C 4152544954494F4E20- <1>
   611 00007255 464F554E440D0A      <1>
   612                              <1> 	.END_NO_BOOTABLE_PARTITION_MESSAGE:
   613                              <1> 
   614                              <1> .END_LOAD_BOOT_RECORD:
   615 0000725C 1F                  <1> 	POP DS	;RESTORE DS
   616 0000725D 59                  <1> 	POP CX	;RESTORE CX
   617 0000725E 5B                  <1> 	POP BX 	;RESTORE BX
   618 0000725F 58                  <1> 	POP AX	;RESTORE AX
   619 00007260 9D                  <1> 	POPF	;RESTORE FLAGS
   620 00007261 C3                  <1> 	RET		;RETURN NOT A INT
   690                                  
   691                                  INT14: ;Communications
   692 00007262 CF                      	IRET
   693                                  INT15: ;Cassette
   694 00007263 B000                    	MOV AL, 0X00			;AL = 0X00
   695 00007265 B486                    	MOV AH, 0X86			;NO CASSETTE PRESENT
   696 00007267 F9                      	STC			;NOT BIOS SUPPORTED
   697                                  				;THIS IS HOW I RETURN THE CARRY FLAG
   698 00007268 50                      	PUSH AX			;STORE AX
   699 00007269 9C                      	PUSHF			;STORE FLAGS
   700 0000726A 58                      	POP AX			;GET AX = FLAGS
   701 0000726B 55                      	PUSH BP			;STORE BP
   702 0000726C 89E5                    	MOV BP, SP              ;Copy SP to BP for use as index
   703 0000726E 83C508                  	ADD BP, 0X08			;offset 8
   704 00007271 836600FE                	AND WORD [BP], 0XFFFE			;CLEAR CF = ZER0
   705 00007275 83E001                  	AND AX, 0X0001			;ONLY CF 
   706 00007278 094600                  	OR	WORD [BP], AX		;SET CF AX
   707 0000727B 5D                      	POP BP               			;RESTORE BASE POINTER
   708 0000727C 58                      	POP AX			;RESTORE AX	
   709 0000727D CF                      	IRET			;RETRUN	
   710                                  	
   711                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   712                                  ;INT 0X16
   713                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   714                                  %INCLUDE "asm/int16.asm"
     1                              <1> INT16: ;Keyboard
     2                              <1> 
     3 0000727E 80FC00              <1> 	CMP AH, 0X00			;Check ah 
     4 00007281 740C                <1> 	JZ .WAIT_FOR_KEY			;ah=0
     5 00007283 80FC01              <1> 	CMP AH, 0X01					
     6 00007286 7438                <1> 	JZ .CHECK_ZERO_FLAG			;ah=1
     7 00007288 80FC02              <1> 	CMP AH, 0X02					
     8 0000728B 745D                <1> 	JZ .GET_SHIFT_FLAGS			;ah=2
     9 0000728D FB                  <1> 	STI
    10 0000728E CF                  <1> 	IRET
    11                              <1> 
    12                              <1>   .WAIT_FOR_KEY:
    13 0000728F 53                  <1> 	PUSH BX
    14 00007290 1E                  <1> 	PUSH DS
    15                              <1>   .WAIT_FOR_KEY_LOOP:
    16 00007291 FB                  <1> 	STI
    17 00007292 B84000              <1> 	MOV AX, 0X0040
    18 00007295 8ED8                <1> 	MOV DS, AX
    19 00007297 FA                  <1> 	CLI
    20 00007298 8B1E1A00            <1> 	MOV BX, [0X001A]			;Tail
    21 0000729C 3B1E1C00            <1> 	CMP BX, [0X001C]			;Head
    22 000072A0 74EF                <1> 	JZ .WAIT_FOR_KEY_LOOP
    23 000072A2 8B07                <1> 	MOV AX, [BX]				;GET SCAN CODE / CHAR CODE 
    24 000072A4 83C302              <1> 	ADD BX, 0X0002			   	;Mov bx forward through buffer
    25 000072A7 3B1E8200            <1> 	CMP BX, [0X0082]			;Check to see if at the end
    26 000072AB 7204                <1> 	JB .NOT_END_OF_BUFFER		;Jump over next step if not at the end
    27 000072AD 8B1E8000            <1> 	MOV BX, [0X0080]			;Set bx back to begining 
    28                              <1> 	.NOT_END_OF_BUFFER:
    29 000072B1 891E1A00            <1> 	MOV [0X001A], BX	
    30 000072B5 1F                  <1> 	POP DS
    31 000072B6 5B                  <1> 	POP BX
    32 000072B7 3CE0                <1> 	CMP AL, 0XE0
    33 000072B9 7402                <1> 	JZ .AL_0
    34 000072BB FB                  <1> 	STI
    35 000072BC CF                  <1> 	IRET
    36                              <1> 	
    37                              <1>   .AL_0:
    38 000072BD B000                <1> 	MOV AL, 0x00
    39 000072BF CF                  <1> 	IRET
    40                              <1> 
    41                              <1>   .CHECK_ZERO_FLAG:	
    42 000072C0 53                  <1>   	PUSH BX				
    43 000072C1 1E                  <1> 	PUSH DS
    44 000072C2 B84000              <1> 	MOV AX, 0X0040
    45 000072C5 8ED8                <1> 	MOV DS, AX
    46                              <1> 
    47 000072C7 8B1E1A00            <1> 	MOV BX, [0X001A]			;Tail
    48 000072CB 3B1E1C00            <1> 	CMP BX, [0X001C]			;Head
    49 000072CF 8B07                <1> 	MOV AX, [BX]
    50 000072D1 1F                  <1> 	POP DS
    51 000072D2 5B                  <1> 	POP BX
    52                              <1> 	
    53 000072D3 50                  <1> 	PUSH AX					;STORE AX
    54 000072D4 9C                  <1> 	PUSHF					;STORE FLAGES
    55 000072D5 58                  <1> 	POP AX					;AX = FLAGS
    56 000072D6 55                  <1>     PUSH BP					;STORE BP
    57 000072D7 89E5                <1> 	MOV BP, SP             	;Copy SP to BP for use as index
    58 000072D9 83C508              <1> 	ADD BP, 0X08			;offset 8
    59 000072DC 836600BF            <1> 	AND WORD [BP], 0XFFBF	;CLEAR ZF
    60 000072E0 83E040              <1> 	AND AX, 0X0040			;ONLY ZF
    61 000072E3 094600              <1> 	OR	WORD [BP], AX		;SET ZF
    62 000072E6 5D                  <1> 	POP BP               	;RESTORE BASE POINTER
    63 000072E7 58                  <1> 	POP AX					;RESTORE AX
    64 000072E8 FB                  <1> 	STI
    65 000072E9 CF                  <1> 	IRET
    66                              <1> 	
    67                              <1>   .GET_SHIFT_FLAGS:	  
    68 000072EA B80000              <1> 	MOV AX, 0X0000			;FOR NOW RETURNS NOTHING. 
    69 000072ED FB                  <1> 	STI
    70 000072EE CF                  <1> 	IRET
   715                                  	
   716                                  INT17: ;Printer	
   717 000072EF CF                      	IRET
   718                                  
   719                                  INT18: ;Resident Basic
   720 000072F0 B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   721 000072F2 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   722 000072F4 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   723 000072F6 B031                    	MOV AL, '1'		;SET AL TO CHAR	
   724 000072F8 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   725 000072FA B038                    	MOV AL, '8'		;SET AL TO CHAR
   726 000072FC CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   727 000072FE F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   728 000072FF CF                      	IRET		;RETURN FROM INTERRUPT
   729                                  
   730                                  INT19: ;Bootstrap
   731 00007300 EA0000FFFF              	JMP 0XFFFF:0X0000			;JUMPS TO BOOT CODE
   732                                  
   733                                  INT1A: ;Time of Day
   734 00007305 1E                      	PUSH DS
   735 00007306 53                        	PUSH BX
   736 00007307 B84000                  	MOV AX, 0X0040			;BIOS DATA AREA
   737 0000730A 8ED8                    	MOV DS, AX			;SET DS
   738 0000730C BB6C00                  	MOV BX, 0X006C			;NUMBER OF CLICKS
   739 0000730F 8B17                    	MOV DX, WORD [BX]			;SET DX CLICKS
   740 00007311 83C302                  	ADD BX, 0X0002
   741 00007314 8B0F                    	MOV CX, WORD [BX]			;0X006E
   742 00007316 83E10F                  	AND CX, 0x000F
   743 00007319 B80000                  	MOV AX, 0X0000			;
   744 0000731C 5B                      	POP BX
   745 0000731D 1F                      	POP DS
   746 0000731E CF                      	IRET
   747                                  
   748                                  INT1B: ;Keyboard Break
   749 0000731F B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   750 00007321 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   751 00007323 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   752 00007325 B031                    	MOV AL, '1'		;SET AL TO CHAR	
   753 00007327 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   754 00007329 B042                    	MOV AL, 'B'		;SET AL TO CHAR
   755 0000732B CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   756 0000732D F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   757 0000732E CF                      	IRET		;RETURN FROM INTERRUPT
   758                                  
   759                                  INT1C: ;Timer Tick
   760 0000732F B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   761 00007331 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   762 00007333 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   763 00007335 B031                    	MOV AL, '1'		;SET AL TO CHAR	
   764 00007337 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   765 00007339 B043                    	MOV AL, 'C'		;SET AL TO CHAR
   766 0000733B CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   767 0000733D F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   768 0000733E CF                      	IRET		;RETURN FROM INTERRUPT
   769                                  
   770                                  INT1D: ;Video Initialization 
   771 0000733F B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   772 00007341 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   773 00007343 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   774 00007345 B031                    	MOV AL, '1'		;SET AL TO CHAR	
   775 00007347 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   776 00007349 B044                    	MOV AL, 'D'		;SET AL TO CHAR
   777 0000734B CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   778 0000734D F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   779 0000734E CF                      	IRET		;RETURN FROM INTERRUPT
   780                                  
   781                                  INT1E: ;Diskette Parameters
   782 0000734F B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   783 00007351 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   784 00007353 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   785 00007355 B031                    	MOV AL, '1'		;SET AL TO CHAR	
   786 00007357 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   787 00007359 B045                    	MOV AL, 'E'		;SET AL TO CHAR
   788 0000735B CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   789 0000735D F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   790 0000735E CF                      	IRET		;RETURN FROM INTERRUPT
   791                                  
   792                                  INT1F: ;Video Graphics Characters
   793 0000735F B40E                    	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
   794 00007361 B049                    	MOV AL, 'I'		;SET AL TO CHAR	
   795 00007363 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   796 00007365 B031                    	MOV AL, '1'		;SET AL TO CHAR	
   797 00007367 CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   798 00007369 B046                    	MOV AL, 'F'		;SET AL TO CHAR
   799 0000736B CD10                    	INT 0X10		;CALL INTERRUPT 0X10
   800 0000736D F4                      	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
   801 0000736E CF                      	IRET		;RETURN FROM INTERRUPT
   802                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   803                                  ;EXTRA FUNCTIONS
   804                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   805                                  %INCLUDE "asm/functions.asm"
     1                              <1> ;EXTRA FUNCTIONS
     2                              <1> DUMP_REGISTERS:	
     3 0000736F 50                  <1> 	PUSH AX
     4 00007370 52                  <1> 	PUSH DX
     5 00007371 51                  <1> 	PUSH CX
     6 00007372 53                  <1> 	PUSH BX
     7 00007373 50                  <1> 	PUSH AX	
     8                              <1> 	
     9 00007374 B40E                <1> 	MOV AH, 0X0E
    10 00007376 B020                <1> 	MOV AL, ' '
    11 00007378 CD10                <1> 	INT 0X10
    12 0000737A B041                <1> 	MOV AL, 'A'
    13 0000737C CD10                <1> 	INT 0X10
    14 0000737E B058                <1> 	MOV AL, 'X'	
    15 00007380 CD10                <1> 	INT 0X10
    16 00007382 B03D                <1> 	MOV AL, '='
    17 00007384 CD10                <1> 	INT 0X10	
    18 00007386 58                  <1> 	POP AX
    19 00007387 50                  <1> 	PUSH AX
    20 00007388 88E0                <1> 	MOV AL, AH
    21 0000738A E86700              <1> 	CALL WIRTE_AL_INT10_E
    22 0000738D 58                  <1> 	POP AX
    23 0000738E E86300              <1> 	CALL WIRTE_AL_INT10_E
    24                              <1> 	
    25 00007391 B40E                <1> 	MOV AH, 0X0E
    26 00007393 B020                <1> 	MOV AL, ' '
    27 00007395 CD10                <1> 	INT 0X10
    28 00007397 B042                <1> 	MOV AL, 'B'
    29 00007399 CD10                <1> 	INT 0X10
    30 0000739B B058                <1> 	MOV AL, 'X'	
    31 0000739D CD10                <1> 	INT 0X10
    32 0000739F B03D                <1> 	MOV AL, '='
    33 000073A1 CD10                <1> 	INT 0X10	
    34 000073A3 58                  <1> 	POP AX
    35 000073A4 50                  <1> 	PUSH AX
    36 000073A5 88E0                <1> 	MOV AL, AH
    37 000073A7 E84A00              <1> 	CALL WIRTE_AL_INT10_E
    38 000073AA 58                  <1> 	POP AX
    39 000073AB E84600              <1> 	CALL WIRTE_AL_INT10_E
    40                              <1> 	
    41 000073AE B40E                <1> 	MOV AH, 0X0E
    42 000073B0 B020                <1> 	MOV AL, ' '
    43 000073B2 CD10                <1> 	INT 0X10
    44 000073B4 B043                <1> 	MOV AL, 'C'
    45 000073B6 CD10                <1> 	INT 0X10
    46 000073B8 B058                <1> 	MOV AL, 'X'	
    47 000073BA CD10                <1> 	INT 0X10
    48 000073BC B03D                <1> 	MOV AL, '='
    49 000073BE CD10                <1> 	INT 0X10	
    50 000073C0 58                  <1> 	POP AX
    51 000073C1 50                  <1> 	PUSH AX
    52 000073C2 88E0                <1> 	MOV AL, AH
    53 000073C4 E82D00              <1> 	CALL WIRTE_AL_INT10_E
    54 000073C7 58                  <1> 	POP AX
    55 000073C8 E82900              <1> 	CALL WIRTE_AL_INT10_E
    56                              <1> 	
    57 000073CB B40E                <1> 	MOV AH, 0X0E
    58 000073CD B020                <1> 	MOV AL, ' '
    59 000073CF CD10                <1> 	INT 0X10
    60 000073D1 B044                <1> 	MOV AL, 'D'
    61 000073D3 CD10                <1> 	INT 0X10
    62 000073D5 B058                <1> 	MOV AL, 'X'	
    63 000073D7 CD10                <1> 	INT 0X10
    64 000073D9 B03D                <1> 	MOV AL, '='
    65 000073DB CD10                <1> 	INT 0X10	
    66 000073DD 58                  <1> 	POP AX
    67 000073DE 50                  <1> 	PUSH AX
    68 000073DF 88E0                <1> 	MOV AL, AH
    69 000073E1 E81000              <1> 	CALL WIRTE_AL_INT10_E
    70 000073E4 58                  <1> 	POP AX
    71 000073E5 E80C00              <1> 	CALL WIRTE_AL_INT10_E
    72                              <1> 	
    73 000073E8 B40E                <1> 	MOV AH, 0X0E
    74 000073EA B00D                <1> 	MOV AL, 0X0D
    75 000073EC CD10                <1> 	INT 0X10
    76 000073EE B00A                <1> 	MOV AL, 0X0A
    77 000073F0 CD10                <1> 	INT 0X10	
    78 000073F2 58                  <1> 	POP AX
    79 000073F3 C3                  <1> 	RET
    80                              <1> ;;;;;;;;;;;;;;;;;;;;;;;
    81                              <1> ;WRITE TO SCREEN;;;;;;;
    82                              <1> ;;;;;;;;;;;;;;;;;;;;;;;
    83                              <1> WIRTE_AL_INT10_E:
    84                              <1> 
    85 000073F4 50                  <1> 	PUSH AX
    86 000073F5 53                  <1> 	PUSH BX
    87 000073F6 51                  <1> 	PUSH CX
    88 000073F7 52                  <1> 	PUSH DX
    89                              <1> 
    90 000073F8 88C3                <1> 	MOV BL, AL
    91                              <1> 
    92 000073FA 88C6                <1> 	MOV DH, AL
    93 000073FC B104                <1> 	MOV CL, 0X04
    94 000073FE D2EE                <1> 	SHR DH, CL
    95                              <1> 
    96 00007400 88F0                <1> 	MOV AL, DH
    97 00007402 240F                <1> 	AND AL, 0X0F
    98 00007404 3C09                <1> 	CMP AL, 0X09
    99 00007406 7704                <1> 	JA LETTER_HIGH
   100                              <1> 
   101 00007408 0430                <1> 	ADD AL, 0X30
   102 0000740A EB02                <1> 	JMP PRINT_VALUE_HIGH
   103                              <1> 
   104                              <1> 	LETTER_HIGH:
   105 0000740C 0437                <1> 	ADD AL, 0X37
   106                              <1> 
   107                              <1> 	PRINT_VALUE_HIGH:
   108 0000740E B40E                <1> 	MOV AH, 0X0E
   109 00007410 CD10                <1> 	INT 0X10
   110                              <1> 
   111 00007412 88D8                <1> 	MOV AL, BL
   112 00007414 240F                <1> 	AND AL, 0X0F
   113 00007416 3C09                <1> 	CMP AL, 0X09
   114 00007418 7704                <1> 	JA LETTER_LOW
   115                              <1> 
   116 0000741A 0430                <1> 	ADD AL, 0X30
   117 0000741C EB02                <1> 	JMP PRINT_VALUE_LOW
   118                              <1> 
   119                              <1> 	LETTER_LOW:
   120 0000741E 0437                <1> 	ADD AL, 0X37
   121                              <1> 
   122                              <1> 	PRINT_VALUE_LOW:
   123 00007420 B40E                <1> 	MOV AH, 0X0E
   124 00007422 CD10                <1> 	INT 0X10
   125                              <1> 
   126 00007424 5A                  <1> 	POP DX
   127 00007425 59                  <1> 	POP CX
   128 00007426 5B                  <1> 	POP BX
   129 00007427 58                  <1> 	POP AX
   130                              <1> 
   131 00007428 C3                  <1> 	RET
   132                              <1> 
   133                              <1> WAIT_1:
   134 00007429 51                  <1> 	PUSH CX
   135 0000742A B9FFFF              <1> 	MOV CX, 0XFFFF
   136                              <1>   .LOOP1:
   137 0000742D E2FE                <1> 	LOOP .LOOP1
   138 0000742F 59                  <1> 	POP CX
   139 00007430 C3                  <1> 	RET
   140                              <1> 
   141                              <1> WAIT_8:
   142 00007431 51                  <1> 	PUSH CX
   143 00007432 B90800              <1> 	MOV CX, 8
   144                              <1>   .LOOP1:
   145 00007435 51                  <1> 	PUSH CX
   146 00007436 B9FFFF              <1> 	MOV CX, 0XFFFF
   147                              <1>   .LOOP2:
   148 00007439 E2FE                <1> 	LOOP .LOOP2
   149 0000743B 59                  <1> 	POP CX
   150 0000743C E2F7                <1> 	LOOP .LOOP1
   151 0000743E 59                  <1> 	POP CX
   152 0000743F C3                  <1> 	RET
   153                              <1> 	
   154                              <1> WAIT_16:
   155 00007440 51                  <1> 	PUSH CX
   156 00007441 B91000              <1> 	MOV CX, 16
   157                              <1>   .LOOP1:
   158 00007444 51                  <1> 	PUSH CX
   159 00007445 B9FFFF              <1> 	MOV CX, 0XFFFF
   160                              <1>   .LOOP2:
   161 00007448 E2FE                <1> 	LOOP .LOOP2
   162 0000744A 59                  <1> 	POP CX
   163 0000744B E2F7                <1> 	LOOP .LOOP1
   164 0000744D 59                  <1> 	POP CX
   165 0000744E C3                  <1> 	RET
   166                              <1> 	
   167                              <1> WAIT_32:
   168 0000744F 51                  <1> 	PUSH CX
   169 00007450 B92000              <1> 	MOV CX, 32
   170                              <1>   .LOOP1:
   171 00007453 51                  <1> 	PUSH CX
   172 00007454 B9FFFF              <1> 	MOV CX, 0XFFFF
   173                              <1>   .LOOP2:
   174 00007457 E2FE                <1> 	LOOP .LOOP2
   175 00007459 59                  <1> 	POP CX
   176 0000745A E2F7                <1> 	LOOP .LOOP1
   177 0000745C 59                  <1> 	POP CX
   178 0000745D C3                  <1> 	RET
   179                              <1> 
   180                              <1> WAIT_64:
   181 0000745E 51                  <1> 	PUSH CX
   182 0000745F B94000              <1> 	MOV CX, 64
   183                              <1>   .LOOP1:
   184 00007462 51                  <1> 	PUSH CX
   185 00007463 B9FFFF              <1> 	MOV CX, 0XFFFF
   186                              <1>   .LOOP2:
   187 00007466 E2FE                <1> 	LOOP .LOOP2
   188 00007468 59                  <1> 	POP CX
   189 00007469 E2F7                <1> 	LOOP .LOOP1
   190 0000746B 59                  <1> 	POP CX
   191 0000746C C3                  <1> 	RET
   192                              <1> 
   193                              <1> WAIT_128:
   194 0000746D 51                  <1> 	PUSH CX
   195 0000746E B98000              <1> 	MOV CX, 128
   196                              <1>   .LOOP1:
   197 00007471 51                  <1> 	PUSH CX
   198 00007472 B9FFFF              <1> 	MOV CX, 0XFFFF
   199                              <1>   .LOOP2:
   200 00007475 E2FE                <1> 	LOOP .LOOP2
   201 00007477 59                  <1> 	POP CX
   202 00007478 E2F7                <1> 	LOOP .LOOP1
   203 0000747A 59                  <1> 	POP CX
   204 0000747B C3                  <1> 	RET
   205                              <1> 	
   206                              <1> 	
   207                              <1> WAIT_512:
   208 0000747C 51                  <1> 	PUSH CX
   209 0000747D B90002              <1> 	MOV CX, 512
   210                              <1>   .LOOP1:
   211 00007480 51                  <1> 	PUSH CX
   212 00007481 B9FFFF              <1> 	MOV CX, 0XFFFF
   213                              <1>   .LOOP2:
   214 00007484 E2FE                <1> 	LOOP .LOOP2
   215 00007486 59                  <1> 	POP CX
   216 00007487 E2F7                <1> 	LOOP .LOOP1
   217 00007489 59                  <1> 	POP CX
   218 0000748A C3                  <1> 	RET
   219                              <1> 
   220                              <1> 
   221                              <1> 
   806                                  
   807 0000748B FF<rep B65h>                    setloc	0FFF0h			; Power-On Entry Point
   807          ******************       warning: Inserting 2917 bytes [-w+user]
   808                                  reset:
   809 00007FF0 EA[9360]00F0                    jmp 0xF000:init
   810                                  
   811                                          setloc	0FFF5h			; ROM Date in ASCII
   812 00007FF5 32322F31302F3234                db	DATE			; BIOS release date MM/DD/YY
   813 00007FFD 20                              db	20h
   814                                  
   815                                          setloc	0FFFEh			; System Model byte
   816 00007FFE FE                              db	MODEL_BYTE
   817 00007FFF FF                              db	0ffh
