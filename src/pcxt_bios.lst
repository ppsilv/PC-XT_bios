     1                                          CPU 8086
     2                                          BITS 16
     3                                  
     4                                  ;Available Memory
     5                                  ; Dram memory
     6                                  ; 00000h-----+--------RAM 1MBytes
     7                                  ; F7FFFh-----|
     8                                  ; Eeprom memory
     9                                  ; F8000h-----+--------ROM 32KBytes
    10                                  ; F9000h-----|
    11                                  ; FA000h-----|
    12                                  ; FB000h-----|
    13                                  ; FC000h-----|
    14                                  ; FD000h-----|
    15                                  ; FE000h-----|
    16                                  ; FF000H-----|
    17                                  ; FFFFFh-----|
    18                                  
    19                                  
    20                                  %imacro setloc  1.nolist
    21                                  %assign pad_bytes (%1-($-$$)-START)
    22                                  %if pad_bytes < 0
    23                                  %assign over_bytes -pad_bytes
    24                                  %error Preceding code extends beyond setloc location by over_bytes bytes
    25                                  %endif
    26                                  %if pad_bytes > 0
    27                                  %warning Inserting pad_bytes bytes
    28                                   times  pad_bytes db 0FFh
    29                                  %endif
    30                                  %endm
    31                                  ;History
    32                                  ; 2444 - Version 10.0.01 implemented print2
    33                                  ; 2444 - Version 10.0.01 fixed erro in UART_TX, no push de BX
    34                                  ; 2444 - Version 10.0.02 implemented prompt
    35                                  ; 2445 - Version 10.0.03 now run in a 32k bytes of eeprom.
    36                                  ;                        START = 0x8000
    37                                  ;                        init2 = 0xE000
    38                                  ;                        reset = 0xFFF0
    39                                  ; 0C000h
    40                                  
    41                                  %define	START		08000h		; BIOS starts at offset 08000h
    42                                  %define DATE		'22/10/24'
    43                                  %define MODEL_BYTE	0FEh		; IBM PC/XT
    44                                  %define VERSION		'1.0.03'	; BIOS version
    45                                  
    46                                  %define context_off  0x0
    47                                  %define context_seg  0x2
    48                                  %define context_len  0x4
    49                                  %define context_val  0x6000
    50                                  
    51                                  bioscseg	equ	0F000h
    52                                  dramcseg        equ     06000h
    53                                  biosdseg	equ	0040h
    54                                  
    55                                  post_reg	equ	80h
    56                                  serial_timeout	equ	7Ch	; byte[4] - serial port timeout values
    57                                  equip_serial	equ	00h	; word[4] - addresses of serial ports
    58                                  unused_reg	equ	0C0h	; used for hardware detection and I/O delays
    59                                  equipment_list	equ	10h	; word - equpment list
    60                                  
    61                                  reg_addr_dump   equ     0x0400
    62                                  reg_buff_read   equ     0x0402  ; buffer 255 bytes
    63                                  reg_counter     equ     0x0500  ; char counter in the buffer
    64                                  reg_intr        equ     0x0501  ; next variable
    65                                  reg_next_dumm   equ     0x0502  ; next variable
    66                                  
    67                                          org	START
    68                                  
    69 00000000 E9A560                             jmp     init
    70                                             ;12345678901234567890
    71 00000003 38303838202D204350-     msg0    db "8088 - CPU TXM/8 III",0
    71 0000000C 552054584D2F382049-
    71 00000015 494900             
    72 00000018 5061756C6F2053696C-     msg1    db "Paulo Silva  (c)2024",0
    72 00000021 766120202863293230-
    72 0000002A 323400             
    73 0000002D 4D6F6E383620562031-     msg2    db "Mon86 V 1.0.00 2443A",0
    73 00000036 2E302E303020323434-
    73 0000003F 334100             
    74 00000042 314D42206472616D20-     msg3    db "1MB dram rom at28c64",0
    74 0000004B 726F6D206174323863-
    74 00000054 363400             
    75 00000057 0028145450              row:    db 0, 40, 20, 84, 80
    76                                  
    77 0000005C FF<rep 5FA4h>                   setloc	0E000h
    77          ******************       warning: Inserting 24484 bytes [-w+user]
    78                                  
    79 00006000 585420383038382042-     welcome		db	"XT 8088 BIOS, Version "
    79 00006009 494F532C2056657273-
    79 00006012 696F6E20           
    80 00006016 312E302E3033            		db	VERSION
    81 0000601C 2E200D                  		db	". ", 0Dh
    82 0000601F 5061756C6F2053696C-     		db	"Paulo Silva(pgordao) - Copyright (C) 2024", 0Dh
    82 00006028 76612870676F726461-
    82 00006031 6F29202D20436F7079-
    82 0000603A 726967687420284329-
    82 00006043 20323032340D       
    83 00006049 43505520383038382D-     		db	"CPU 8088-2   board TXM/8 III  ", 0Dh
    83 00006052 32202020626F617264-
    83 0000605B 2054584D2F38204949-
    83 00006064 4920200D           
    84 00006068 4D6F6E383620562031-     		db	"Mon86 V ",VERSION ," 2443A 1MB Dram Rom at28c256", 0Dh, 0
    84 00006071 2E302E303320323434-
    84 0000607A 334120314D42204472-
    84 00006083 616D20526F6D206174-
    84 0000608C 3238633235360D00   
    85                                  
    86 00006094 0D4469676974652075-     getChar  db 0Dh,"Digite um numero: ",0
    86 0000609D 6D206E756D65726F3A-
    86 000060A6 2000               
    87                                  
    88                                  init:
    89 000060A8 FA                              cli				; disable interrupts
    90                                          ;cld				; clear direction flag
    91 000060A9 B80060                          mov ax, 0x6000
    92 000060AC 8EC0                            mov es, ax
    93 000060AE B80070                          mov ax, 0x7000                  ; Segmento Stack
    94 000060B1 8ED0                            mov ss, ax
    95 000060B3 B800F0                          mov ax, 0xF000
    96 000060B6 8ED8                            mov ds, ax
    97 000060B8 8EC8                    		mov cs, ax
    98 000060BA 31E4                            xor sp, sp
    99                                  
   100                                  
   101                                          ;PPI 99 PortA = input PortB = output PortC = input
   102 000060BC B099                            mov AL, 0x99
   103 000060BE E663                            out 0x63, AL
   104                                  
   105 000060C0 E88900                  		CALL INITIALIZE_8259		;INTERRUPT CONTROLLER
   106 000060C3 E89900                  		CALL INITIALIZE_8253		;TIMER
   107                                  
   108                                  		;THIS IS NOT PART OF THE V40 BUT IS BUILT INTO THE MAIN BOARD
   109 000060C6 B000                    		MOV  AL, 0X00 	;DISABLE SPK AND CHANEL CHECK
   110 000060C8 E661                    		OUT  0X61, AL	;PORT 0X61 CONTROL PORT		
   111                                  
   112                                  
   113 000060CA E8AC01                          call configure_uart
   114                                  
   115 000060CD E88902                          call scr_clear
   116 000060D0 BB[0060]                        mov  bx, welcome
   117 000060D3 E85302                          call print2
   118                                  
   119                                  		;mov  bx, cs:msg0
   120                                  		;call print2
   121                                  
   122 000060D6 BB0105                  		mov	 bx, reg_intr
   123 000060D9 B010                    		mov  al, 10h
   124 000060DB 3E8807                  		mov  byte ds:[bx],al
   125                                  
   126 000060DE B80000                          mov  AX, 0x0000
   127 000060E1 E80500                          call writeRegAddrDump
   128 000060E4 E8A600                          call dump
   129                                  
   130                                          ;STI ;Enable interrupts
   131                                  
   132 000060E7 EB41                            jmp MainLoop
   133                                  
   134                                  writeRegAddrDump:
   135 000060E9 50                              push AX
   136 000060EA B80060                          mov AX, dramcseg ; Segmento DRAM
   137 000060ED 8EC0                            mov ES, AX
   138 000060EF 58                              pop AX
   139 000060F0 26A30004                        mov word es:[reg_addr_dump], AX
   140 000060F4 268B1E0004                      mov bx, word es:[reg_addr_dump]
   141 000060F9 C3                              ret
   142                                  
   143                                  ReadLine:
   144 000060FA B100                            mov cl,0x0
   145 000060FC BB0204                          mov  bx,  reg_buff_read
   146                                  loop:
   147 000060FF E8F700                          call printPrompt
   148                                  loopP:  ;RX blocante
   149 00006102 E8CC01                          call UART_RX_blct       
   150                                   ;       jnc  loopP
   151 00006105 E8D601                          call printch
   152                                  
   153 00006108 268807                          mov  byte es:[bx], al 
   154 0000610B 26C6470100                      mov  byte es:[bx+1], 0x0 
   155 00006110 43                              inc  bx
   156                                  
   157 00006111 3C41                            cmp  AL, 0x41
   158 00006113 7429                            jz   tbled1
   159 00006115 3C42                            cmp  AL, 0x42
   160 00006117 742C                            jz   tbled2
   161                                  
   162 00006119 3C0A                            CMP  AL, 0x0A
   163 0000611B 75E5                            JNZ  loopP
   164 0000611D E8DF00                          call printLf
   165 00006120 E8D600                          call printPrompt
   166 00006123 BB0204                          mov  BX, reg_buff_read
   167 00006126 E81002                          call printFromDram
   168 00006129 C3                              ret
   169                                  
   170                                  MainLoop:
   171                                  
   172 0000612A E81100                          CALL tbled1
   173 0000612D B9FF1F                          mov cx, 0x1fFF
   174 00006130 E81602                  		call	basicDelay    
   175 00006133 E80F00                          CALL tbled2
   176 00006136 B9FF1F                          mov cx, 0x1fFF
   177 00006139 E80D02                  		call	basicDelay    
   178                                  
   179                                  ;;        call ReadLine
   180 0000613C EBEC                            jmp MainLoop       
   181                                  
   182                                  tbled1: 
   183 0000613E E461                            in  al, 0x61
   184 00006140 0C08                            or  al, 0x08 
   185 00006142 E661                            out 0x61, al
   186 00006144 C3                              ret
   187                                  tbled2:
   188 00006145 E461                            in  al, 0x61
   189 00006147 24F7                            and al, 0xF7
   190 00006149 E661                            out 0x61, al
   191 0000614B C3                                ret
   192                                  
   193                                  
   194                                  INITIALIZE_8259:
   195 0000614C 50                      	PUSH AX
   196                                  
   197 0000614D B017                    	MOV AL, 0X17		;ICW1
   198 0000614F E620                    	OUT 0X20, AL
   199 00006151 B070                    	MOV AL, 0X70		;ICW2
   200 00006153 E621                    	OUT 0X21, AL
   201 00006155 B009                    	MOV AL, 0X09		;ICW4
   202 00006157 E621                    	OUT 0X21, AL
   203                                  
   204                                          ;OCW1
   205                                          ;UNMASK IRQ0
   206 00006159 B0FE                    	MOV AL, 0XFE		
   207 0000615B E621                    	OUT 0X21, AL		
   208 0000615D 58                      	POP AX
   209 0000615E C3                      	RET
   210                                  
   211                                  INITIALIZE_8253:
   212                                  
   213 0000615F 50                      	PUSH AX
   214 00006160 51                      	PUSH CX
   215                                  
   216 00006161 B036                    	MOV AL, 0X36 		;00110110b  
   217                                  			        ;CHANNEL 0
   218                                  			        ;WRITE LOW BYTE THEN HIGH BYTE
   219                                  			        ;MODE 3 
   220                                  			        ;16 BIT COUNTER 
   221                                  			
   222 00006163 E643                    	OUT 0X43, AL		;CONTROL REG
   223                                  
   224 00006165 B9FFFF                  	MOV CX, 0XFFFF		;COUNT 
   225                                  
   226 00006168 88C8                    	MOV AL, CL			;WRITE LOW BYTE OF COUNT
   227 0000616A E640                    	OUT 0X40, AL		;PORT 0X40
   228                                  			        	;INTERNAL FLIP-FLOP INC
   229 0000616C 88E8                    	MOV AL, CH			;WRITE HIGH BYTE OF COUNT 
   230 0000616E E640                    	OUT 0X40, AL		;PORT 040
   231                                  
   232                                  	;;;;;;;;;;;
   233                                  	;TEST TONE
   234                                  	;;;;;;;;;;;
   235 00006170 B003                    	MOV AL, 0X03		;ENABLE SPK AND TIMMER 2 'GO'
   236 00006172 E661                    	OUT 0X61, AL		;PORT 0X61 CONTROL PORT
   237 00006174 B0B6                    	MOV AL, 0XB6
   238 00006176 E643                    	OUT 0X43, AL
   239 00006178 B000                    	MOV AL, 0X00
   240 0000617A E642                    	OUT 0X42, AL
   241 0000617C B005                    	MOV AL, 0X05
   242 0000617E E642                    	OUT 0X42, AL
   243                                  
   244 00006180 B9FFAF                  	mov cx, 0xafff
   245 00006183 E8C301                  	call	basicDelay
   246 00006186 B000                    	MOV AL, 0X00		;DISABLE SPK AND TIMMER 2 'GO'
   247 00006188 E661                    	OUT 0X61, AL		;PORT 0X61 CONTROL PORT
   248                                  
   249 0000618A 59                      	POP CX
   250 0000618B 58                      	POP AX
   251                                  
   252 0000618C C3                      	RET          
   253                                  ;=================================
   254                                  ; Dump memory
   255                                  ; Memory address: bx
   256                                  ;        counter: cx
   257                                  dump:
   258 0000618D 1E                              PUSH DS
   259 0000618E B80000                          MOV  AX, 0x0000
   260 00006191 8ED8                            MOV DS, AX
   261 00006193 B110                            mov  Cl, 16
   262                                  
   263                                  dump_01:        
   264 00006195 B00D                            mov  al, 0x0d
   265 00006197 E84401                          call UART_TX
   266 0000619A 89D8                            mov  AX, BX
   267 0000619C E89D00                          call print_hex
   268 0000619F B03A                            mov  al, ':'
   269 000061A1 E83A01                          call UART_TX
   270 000061A4 B020                            MOV  AL, ' '
   271 000061A6 E83501                          CALL printch
   272                                          
   273                                          ;;Write 16 bytes em hexadecimal
   274 000061A9 B510                            MOV  CH, 16
   275                                  dump_02:
   276 000061AB 3E8A07                          MOV  AL, DS:[BX]
   277 000061AE E85C00                          CALL byte_to_hex_str
   278 000061B1 50                              PUSH AX
   279 000061B2 E82901                          CALL printch
   280 000061B5 58                              POP  AX
   281 000061B6 88E0                            MOV  AL, AH
   282 000061B8 E82301                          CALL printch
   283 000061BB B020                            MOV  AL, ' '
   284 000061BD E81E01                          CALL printch
   285 000061C0 43                              INC  BX
   286 000061C1 FECD                            DEC  CH
   287 000061C3 75E6                            JNZ  dump_02
   288                                          ;;Wrote 16 bytes
   289                                  
   290 000061C5 B020                            MOV  AL, ' '
   291 000061C7 E81401                          CALL printch
   292                                  
   293 000061CA 83EB10                          SUB  BX, 16
   294                                  
   295                                          ;;Write 16 bytes em ASCII
   296 000061CD B510                            MOV  CH, 16
   297                                  dump_03:
   298 000061CF 3E8A07                          MOV  AL, DS:[BX]
   299 000061D2 3C20                            CMP  AL, 0x20
   300 000061D4 720E                            JC  printPonto ; Flag carry set to 1 AL < 0x20
   301 000061D6 3C80                            CMP  AL, 0x80
   302 000061D8 730A                            JnC  printPonto ; Flag carry set to 0 AL > 0x80
   303 000061DA E80101                          CALL printch
   304 000061DD 43                              INC  BX
   305 000061DE FECD                            DEC  CH
   306 000061E0 75ED                            JNZ  dump_03
   307 000061E2 EB0A                            jmp  dump_Fim
   308                                  printPonto:        
   309 000061E4 B02E                            MOV  AL, '.'
   310 000061E6 E8F500                          CALL printch
   311 000061E9 43                              INC  BX
   312 000061EA FECD                            DEC  CH
   313 000061EC 75E1                            JNZ  dump_03
   314                                          ;;Wrote 16 bytes
   315                                  
   316                                  dump_Fim:
   317 000061EE FEC9                            DEC  CL
   318 000061F0 75A3                            JNZ  dump_01
   319 000061F2 B00D                            mov  al, 0x0d
   320 000061F4 E8E700                          call UART_TX
   321 000061F7 1F                              POP DS
   322 000061F8 C3                              ret
   323                                  
   324                                  ;==================================================
   325                                  printPrompt:
   326 000061F9 B03E                            mov al, '>'
   327 000061FB E8E000                          call printch
   328 000061FE C3                              ret
   329                                  
   330                                  printLf:
   331 000061FF B00D                            mov al, 0x0D
   332 00006201 E8DA00                          call printch
   333 00006204 C3                              ret
   334                                  
   335                                  writeRam:
   336 00006205 268807                          mov byte ES:[BX], AL
   337 00006208 C3                              ret
   338                                  readRam:
   339 00006209 268A07                          mov AL, byte ES:[BX]
   340 0000620C C3                              ret
   341                                  ;byte_to_hex_str
   342                                  ;This function return in AX the ascii code for hexadecimal number from 0 to F
   343                                  ;Parameters:
   344                                  ;               AL = imput
   345                                  ;               AX = output
   346                                  ;Changes CL
   347                                  byte_to_hex_str:
   348 0000620D 51                              PUSH CX
   349 0000620E 88C4                            mov ah, al
   350 00006210 B104                            mov cl, 4
   351 00006212 D2E8                            shr al, cl
   352 00006214 250F0F                          and ax, 0x0f0f
   353 00006217 3C09                            cmp al, 0x09
   354 00006219 7602                            jbe .1
   355 0000621B 0407                            add al, 'A' - '0' - 10
   356                                  .1:
   357 0000621D 80FC09                          cmp ah, 0x09
   358 00006220 7603                            jbe .2
   359 00006222 80C407                          add ah, 'A' - '0' - 10
   360                                  .2:
   361 00006225 053030                          add ax, "00"
   362                                  .ret:
   363 00006228 59                              POP CX
   364 00006229 C3                              ret
   365                                  
   366                                  ;=========================================================================
   367                                  ; print_digit - print hexadecimal digit
   368                                  ; Input:
   369                                  ;	AL - bits 3...0 - digit to print (0...F)
   370                                  ; Output:
   371                                  ;	none
   372                                  ;-------------------------------------------------------------------------
   373                                  print_digit:
   374 0000622A 50                      	push	ax
   375 0000622B 53                      	push	bx
   376 0000622C 240F                    	and	al,0Fh
   377 0000622E 0430                    	add	al,'0'			; convert to ASCII
   378 00006230 3C39                    	cmp	al,'9'			; less or equal 9?
   379 00006232 7602                    	jna	.1
   380 00006234 0407                    	add	al,'A'-'9'-1		; a hex digit
   381                                  .1:
   382 00006236 E8A500                          call    printch
   383 00006239 5B                      	pop	bx
   384 0000623A 58                      	pop	ax
   385 0000623B C3                      	ret
   386                                  
   387                                  ;=========================================================================
   388                                  ; print_hex - print 16-bit number in hexadecimal
   389                                  ; Input:
   390                                  ;	AX - number to print
   391                                  ; Output:
   392                                  ;	none
   393                                  ;-------------------------------------------------------------------------
   394                                  print_hex:
   395 0000623C 86C4                    	xchg	al,ah
   396 0000623E E80600                  	call	print_byte		; print the upper byte
   397 00006241 86C4                    	xchg	al,ah
   398 00006243 E80100                  	call	print_byte		; print the lower byte
   399 00006246 C3                      	ret
   400                                  ;=========================================================================
   401                                  ; print_byte - print a byte in hexadecimal
   402                                  ; Input:
   403                                  ;	AL - byte to print
   404                                  ; Output:
   405                                  ;	none
   406                                  ;-------------------------------------------------------------------------
   407                                  print_byte:
   408 00006247 D0C0                    	rol	al,1
   409 00006249 D0C0                    	rol	al,1
   410 0000624B D0C0                    	rol	al,1
   411 0000624D D0C0                    	rol	al,1
   412 0000624F E8D8FF                  	call	print_digit
   413 00006252 D0C0                    	rol	al,1
   414 00006254 D0C0                    	rol	al,1
   415 00006256 D0C0                    	rol	al,1
   416 00006258 D0C0                    	rol	al,1
   417 0000625A E8CDFF                  	call	print_digit
   418 0000625D C3                      	ret
   419                                  
   420                                  %include "DRV16C550_8088.asm"		
     1                              <1>         CPU 8086
     2                              <1>         BITS 16
     3                              <1> 
     4                              <1> ; Port
     5 0000625E F803                <1> COM1:	DW		0x3F8
     6                              <1> ; Here are the port numbers for various UART registers:
     7                              <1> uart_tx_rx 		EQU  0x3f8 ; 0 DLAB = 0 for Regs. TX and RX
     8                              <1> uart_DLL 		EQU  0x3f8 ; 0 DLAB = 1 Divisor lacth low
     9                              <1> uart_IER 		EQU  0x3f9 ; 1 DLAB = 0 Interrupt Enable Register
    10                              <1> uart_DLH 		EQU  0x3f9 ; 1 DLAB = 1 Divisor lacth high
    11                              <1> uart_ISR 		EQU  0x3fa ; 2 IIR Interrupt Ident. Register READ ONLY
    12                              <1> uart_FCR 		EQU  0x3fa ; 2 Fifo Control Resgister WRITE ONLY
    13                              <1> uart_LCR 		EQU  0x3fb ; 3 Line Control Register
    14                              <1> uart_MCR 		EQU  0x3fc ; 4 Modem Control Register
    15                              <1> uart_LSR 		EQU  0x3fd ; 5 Line Status Register
    16                              <1> uart_MSR 		EQU  0x3fe ; 6 Modem Status Register
    17                              <1> uart_scratch 	EQU  0x3ff ; 7 SCR Scratch Register
    18                              <1> 
    19                              <1> UART_FREQUENCY		equ 4915000
    20                              <1> ;Fomula UART_FREQUENCY/(  9600 * 16)
    21                              <1> ;Baudrates
    22                              <1> UART_BAUD_9600		EQU 32
    23                              <1> UART_BAUD_19200		EQU 16
    24                              <1> UART_BAUD_38400		EQU  8
    25                              <1> UART_BAUD_56800		EQU  5
    26                              <1> UART_BAUD_115200	EQU  3
    27                              <1> UART_BAUD_230400	EQU  1
    28                              <1> 
    29                              <1> UART_TX_WAIT		EQU	0x7fff		; Count before a TX times out
    30                              <1> 
    31 00006260 53657269616C206472- <1> msg0_01:   db "Serial driver for 16C550",0
    31 00006269 6976657220666F7220- <1>
    31 00006272 31364335353000      <1>
    32                              <1> ;configure_uart
    33                              <1> ;Parameters:None
    34                              <1> ;			
    35                              <1> ;			
    36                              <1> configure_uart:
    37 00006279 B9FF1F              <1> 			mov cx, 0x1fff
    38 0000627C E8CA00              <1> 			call	basicDelay
    39 0000627F B000                <1> 			MOV		AL,0x0	 		;
    40 00006281 BAF903              <1> 			MOV		DX, uart_IER
    41 00006284 EE                  <1> 			OUT  	DX,	AL	; Disable interrupts
    42                              <1> 
    43 00006285 B91F00              <1> 			mov cx, 0x1f
    44 00006288 E8BE00              <1> 			call	basicDelay
    45                              <1> 
    46 0000628B B080                <1> 			MOV		AL, 0x80			;
    47 0000628D BAFB03              <1> 			MOV		DX, uart_LCR
    48 00006290 EE                  <1> 			OUT     DX,	AL 	; Turn DLAB on
    49 00006291 B91F00              <1> 			mov cx, 0x1f
    50 00006294 E8B200              <1> 			call	basicDelay
    51                              <1> 
    52 00006297 B008                <1> 			MOV		AL, UART_BAUD_38400 ;0x08
    53 00006299 BAF803              <1> 			MOV		DX, uart_DLL
    54 0000629C EE                  <1> 			OUT     DX,   AL	; Set divisor low
    55 0000629D B91F00              <1> 			mov cx, 0x1f
    56 000062A0 E8A600              <1> 			call	basicDelay
    57                              <1> 
    58 000062A3 B000                <1> 			MOV		AL, 0x00		;
    59 000062A5 BAF903              <1> 			MOV		DX, uart_DLH
    60 000062A8 EE                  <1> 			OUT     DX,	AL	; Set divisor high
    61 000062A9 B91F00              <1> 			mov cx, 0x1f
    62 000062AC E89A00              <1> 			call	basicDelay
    63                              <1> 
    64 000062AF B003                <1> 			MOV     AL, 0x03	; AH	
    65 000062B1 BAFB03              <1> 			MOV		DX, uart_LCR
    66 000062B4 EE                  <1> 			OUT     DX,	AL	; Write out flow control bits 8,1,N
    67 000062B5 B91F00              <1> 			mov cx, 0x1f
    68 000062B8 E88E00              <1> 			call	basicDelay
    69                              <1> 
    70 000062BB B081                <1> 			MOV 	AL,0x81			;
    71 000062BD BAFA03              <1> 			MOV		DX, uart_ISR
    72 000062C0 EE                  <1> 			OUT     DX,	AL	; Turn on FIFO, with trigger level of 8.
    73                              <1> 								                ; This turn on the 16bytes buffer!
    74 000062C1 C3                  <1> 			RET
    75                              <1> ;UART_RX:
    76                              <1> ;Parameters: 
    77                              <1> ;			AL = return the available character
    78                              <1> ;			If al returns with a valid char flag carry is set, otherwise
    79                              <1> ;			flag carry is clear
    80                              <1> UART_RX:	
    81 000062C2 BAFD03              <1> 			MOV DX, uart_LSR
    82 000062C5 EC                  <1> 			IN	AL, DX	 		; Get the line status register
    83 000062C6 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    84 000062C8 F8                  <1> 			CLC 				; Clear carry
    85 000062C9 7405                <1> 			JZ	END				; Just ret (with carry clear) if no characters
    86 000062CB BAF803              <1> 			MOV DX, uart_tx_rx
    87 000062CE EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    88 000062CF F9                  <1> 			STC 				; Set the carry flag
    89                              <1> END:			
    90 000062D0 C3                  <1> 			RET
    91                              <1> 
    92                              <1> UART_RX_blct:	
    93 000062D1 BAFD03              <1> 			MOV DX, uart_LSR
    94 000062D4 EC                  <1> 			IN	AL, DX	 		; Get the line status register
    95 000062D5 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    96 000062D7 74F8                <1> 			JZ	UART_RX_blct	; Just loopif no characters
    97 000062D9 BAF803              <1> 			MOV DX, uart_tx_rx
    98 000062DC EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    99 000062DD C3                  <1> 			RET
   100                              <1> 
   101                              <1> 
   102                              <1> printch:
   103                              <1> UART_TX:	
   104 000062DE 52                  <1> 			PUSH DX
   105 000062DF 51                  <1> 			PUSH CX 	
   106 000062E0 53                  <1> 			PUSH BX
   107 000062E1 50                  <1> 			PUSH AX
   108 000062E2 BBFF7F              <1> 			MOV BX, UART_TX_WAIT	; Set CB to the transmit timeout
   109                              <1> LOOP_UART_TX:
   110 000062E5 BAFD03              <1> 			MOV DX, uart_LSR
   111 000062E8 EC                  <1> 			IN	AL,	DX 				; Get the line status register
   112 000062E9 2460                <1> 			AND AL, 0x60			; Check for TX empty
   113 000062EB 750D                <1> 			JNZ	OUT_UART_TX			; If set, then TX is empty, goto transmit
   114 000062ED B9FF17              <1> 			mov	cx, 0x17ff
   115 000062F0 E85600              <1> 			call basicDelay
   116 000062F3 4B                  <1> 			DEC	BX
   117 000062F4 75EF                <1> 			JNZ LOOP_UART_TX		; Otherwise loop
   118 000062F6 58                  <1> 			POP	AX					; We've timed out at this point so
   119 000062F7 5B                  <1> 			POP BX
   120 000062F8 F8                  <1> 			CLC						; Clear the carry flag and preserve AX
   121 000062F9 C3                  <1> 			RET
   122                              <1> OUT_UART_TX:
   123 000062FA 58                  <1> 			POP	AX					; Good to send at this point, so	
   124 000062FB 3C0D                <1> 			CMP AL, 0x0D
   125 000062FD 740F                <1> 			JZ  println
   126 000062FF BAF803              <1> 			MOV	DX, uart_tx_rx
   127 00006302 EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   128 00006303 B9FF02              <1> 			mov	cx, 0x2ff
   129 00006306 E84000              <1> 			call basicDelay
   130 00006309 5B                  <1> 			POP BX
   131 0000630A 59                  <1> 			POP CX
   132 0000630B 5A                  <1> 			POP DX
   133 0000630C F9                  <1> 			STC						; Set carry flag
   134 0000630D C3                  <1> 			RET
   135                              <1> println:
   136 0000630E BAF803              <1> 			MOV	DX, uart_tx_rx
   137 00006311 EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   138 00006312 B9FF00              <1> 			mov	cx, 0xff
   139 00006315 E83100              <1> 			call basicDelay
   140 00006318 B00A                <1> 			MOV AL, 0x0A
   141 0000631A BAF803              <1> 			MOV	DX, uart_tx_rx
   142 0000631D EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   143 0000631E B9FF00              <1> 			mov	CX, 0xff
   144 00006321 E82500              <1> 			call basicDelay
   145 00006324 5B                  <1> 			POP BX	
   146 00006325 59                  <1> 			POP CX
   147 00006326 5A                  <1> 			POP DX
   148 00006327 F9                  <1> 			STC						; Set carry flag
   149 00006328 C3                  <1> 			RET
   150                              <1> 
   151                              <1> ;print
   152                              <1> ;parameters:
   153                              <1> ;          bx = message address
   154                              <1> ;
   155                              <1> ;print:
   156                              <1> ;        	mov  al,byte ds:[bx]
   157                              <1> ;        	cmp  al,0h
   158                              <1> ;        	jz   fimPrint;
   159                              <1> ;
   160                              <1> ;			MOV	DX, uart_tx_rx
   161                              <1> ; ;       	OUT	DX, AL
   162                              <1> ;			mov	cx, 0xff
   163                              <1> ;			call basicDelay
   164                              <1> ;
   165                              <1> ;        	inc  bx
   166                              <1> ;        	jmp  print
   167                              <1> ;fimPrint:   ret
   168                              <1> 
   169                              <1> print2:
   170 00006329 3E8A07              <1>         	mov  al,byte ds:[bx]
   171 0000632C 3C00                <1>         	cmp  al,0h
   172 0000632E 7408                <1>         	jz   fimPrint2
   173                              <1> cont:
   174 00006330 E8ABFF              <1> 			call UART_TX
   175 00006333 73FB                <1> 			JNC	cont
   176                              <1> 
   177 00006335 43                  <1>         	inc  bx
   178 00006336 EBF1                <1>         	jmp  print2
   179 00006338 C3                  <1> fimPrint2:   ret		
   180                              <1> 
   181                              <1> printFromDram:
   182 00006339 268A07              <1>         	mov  al,byte es:[bx]
   183 0000633C 3C00                <1>         	cmp  al,0h
   184 0000633E 7408                <1>         	jz   fimPrintFromDram
   185                              <1> 
   186                              <1> contFromDram:
   187 00006340 E89BFF              <1> 			call UART_TX
   188 00006343 73FB                <1> 			JNC	contFromDram
   189 00006345 43                  <1>         	inc  bx
   190 00006346 EBF1                <1>         	jmp  printFromDram
   191                              <1> 
   192                              <1> fimPrintFromDram:  
   193 00006348 C3                  <1> 			ret		
   194                              <1> 
   195                              <1> ;print3:
   196                              <1> ;        	mov  al,byte ds:[bx]
   197                              <1> ;        	cmp  al,0h
   198                              <1> ;        	jz   fimPrint3
   199                              <1> ;
   200                              <1> ;			MOV	DX, uart_tx_rx
   201                              <1> ;			OUT	DX, AL		; Write the character to the UART transmit buffer
   202                              <1> ;			mov	cx, 0xff
   203                              <1> ;			call basicDelay
   204                              <1> ;
   205                              <1> ;        	inc  bx
   206                              <1> ;        	jmp  print2
   207                              <1> ;fimPrint3:   ret		
   208                              <1> 
   209                              <1> 	
   210                              <1> basicDelay:
   211 00006349 49                  <1>         dec cx
   212 0000634A 75FD                <1>         jnz basicDelay
   213 0000634C C3                  <1>         ret
   421                                  %include "screen.asm"	
     1                              <1> 
     2 0000634D 1B5B324A00          <1> cls     db 0x1B,"[2J",0
     3 00006352 1B5B213B214800      <1> curpos  db 0x1B,"[!;!H",0
     4                              <1> 
     5                              <1> ;=====================
     6                              <1> ; ESC [ 2 J
     7                              <1> ;
     8                              <1> scr_clear:
     9 00006359 BB[4D63]            <1>         mov	bx, cls
    10 0000635C E8CAFF              <1>         call print2	
    11 0000635F C3                  <1>         ret
    12                              <1> ;=====================
    13                              <1> ; ESC [ Pl ; Pc H
    14                              <1> ; input:
    15                              <1> ;	dh = y position
    16                              <1> ; 	dl = x position
    17                              <1> ; MARK: scr_goto
    18                              <1> scr_goto:
    19 00006360 1E                  <1>         push DS
    20 00006361 B80000              <1>         mov AX, 0x0
    21 00006364 8ED8                <1>         mov DS, AX
    22 00006366 89C3                <1>         mov bx, AX
    23 00006368 3EC6071B            <1>         mov byte ds:[bx],0x1B
    24 0000636C 43                  <1>         inc bx
    25 0000636D 3EC6075B            <1>         mov byte ds:[bx],'['
    26 00006371 43                  <1>         inc bx
    27 00006372 3EC6070A            <1>         mov byte ds:[bx],10
    28 00006376 43                  <1>         inc bx
    29 00006377 3EC6073B            <1>         mov byte ds:[bx],';'
    30 0000637B 43                  <1>         inc bx
    31 0000637C 3EC6070A            <1>         mov byte ds:[bx],10
    32 00006380 43                  <1>         inc bx
    33 00006381 3EC60748            <1>         mov byte ds:[bx],'H'  
    34 00006385 43                  <1>         inc bx
    35 00006386 3EC60700            <1>         mov byte ds:[bx],0x0
    36                              <1> 
    37                              <1> 
    38 0000638A B80000              <1>         mov AX, 0x0
    39 0000638D 89C3                <1>         mov bx, AX
    40 0000638F E897FF              <1>         call print2
    41 00006392 1F                  <1>         POP DS
    42 00006393 C3                  <1> 		ret
    43                              <1> 
    44                              <1> 
   422                                  
   423 00006394 FF<rep 1C5Ch>                   setloc	0FFF0h			; Power-On Entry Point
   423          ******************       warning: Inserting 7260 bytes [-w+user]
   424                                  reset:
   425 00007FF0 EA[A860]00F0                    jmp 0xF000:init
   426                                  
   427                                          setloc	0FFF5h			; ROM Date in ASCII
   428 00007FF5 32322F31302F3234                db	DATE			; BIOS release date MM/DD/YY
   429 00007FFD 20                              db	20h
   430                                  
   431                                          setloc	0FFFEh			; System Model byte
   432 00007FFE FE                              db	MODEL_BYTE
   433 00007FFF FF                              db	0ffh
